
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/109_split_and_partition.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_109_split_and_partition.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_109_split_and_partition.py:


Splitting and Partitioning Objects
==================================

Demonstrate splitting by mass and partitioning along dimensions.

.. GENERATED FROM PYTHON SOURCE LINES 7-18

.. code-block:: default

    import plotly
    import pandas as pd
    from functools import partial

    from elphick.mass_composition.flowsheet import Flowsheet
    from elphick.mass_composition.utils.partition import perfect
    from elphick.mass_composition.datasets.sample_data import sample_data, size_by_assay
    from elphick.mass_composition import MassComposition

    # sphinx_gallery_thumbnail_number = -1








.. GENERATED FROM PYTHON SOURCE LINES 19-23

Create a mass-composition (mc) enabled Xarray Dataset
-----------------------------------------------------

We get some demo data in the form of a pandas DataFrame

.. GENERATED FROM PYTHON SOURCE LINES 24-28

.. code-block:: default


    df_data: pd.DataFrame = sample_data()
    df_data.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>wet_mass</th>
          <th>mass_dry</th>
          <th>FE</th>
          <th>SIO2</th>
          <th>al2o3</th>
          <th>LOI</th>
          <th>group</th>
        </tr>
        <tr>
          <th>index</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>100.0</td>
          <td>90.0</td>
          <td>57.0</td>
          <td>5.2</td>
          <td>3.0</td>
          <td>5.0</td>
          <td>grp_1</td>
        </tr>
        <tr>
          <th>1</th>
          <td>90.0</td>
          <td>80.0</td>
          <td>59.0</td>
          <td>3.1</td>
          <td>1.7</td>
          <td>4.0</td>
          <td>grp_1</td>
        </tr>
        <tr>
          <th>2</th>
          <td>110.0</td>
          <td>90.0</td>
          <td>61.0</td>
          <td>2.2</td>
          <td>0.9</td>
          <td>3.0</td>
          <td>grp_2</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 29-36

.. code-block:: default


    # Construct a MassComposition object and standardise the chemistry variables

    obj_mc: MassComposition = MassComposition(df_data, name='test data')
    print(obj_mc)
    obj_mc.aggregate()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    test data
    <xarray.Dataset> Size: 216B
    Dimensions:   (index: 3)
    Coordinates:
      * index     (index) int64 24B 0 1 2
    Data variables:
        mass_wet  (index) float64 24B 100.0 90.0 110.0
        mass_dry  (index) float64 24B 90.0 80.0 90.0
        H2O       (index) float64 24B 10.0 11.11 18.18
        Fe        (index) float64 24B 57.0 59.0 61.0
        SiO2      (index) float64 24B 5.2 3.1 2.2
        Al2O3     (index) float64 24B 3.0 1.7 0.9
        LOI       (index) float64 24B 5.0 4.0 3.0
        group     (index) object 24B 'grp_1' 'grp_1' 'grp_2'
    Attributes:
        mc_name:            test data
        mc_vars_mass:       ['mass_wet', 'mass_dry']
        mc_vars_chem:       ['Fe', 'SiO2', 'Al2O3', 'LOI']
        mc_vars_attrs:      ['group']
        mc_interval_edges:  {}


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>mass_wet</th>
          <th>mass_dry</th>
          <th>H2O</th>
          <th>Fe</th>
          <th>SiO2</th>
          <th>Al2O3</th>
          <th>LOI</th>
        </tr>
        <tr>
          <th>name</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>test data</th>
          <td>300.0</td>
          <td>260.0</td>
          <td>13.333333</td>
          <td>59.0</td>
          <td>3.515385</td>
          <td>1.873077</td>
          <td>4.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 37-42

Split by Mass
-------------

Split the original Dataset by mass and return both the defined split and complement objects.
Splitting with a float, splits mass but does not modify the absolute grade of the input.

.. GENERATED FROM PYTHON SOURCE LINES 43-48

.. code-block:: default


    obj_mc_split, obj_mc_comp = obj_mc.split(fraction=0.1)
    print(obj_mc_split)
    obj_mc_split.aggregate()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (0.1 * test data)
    <xarray.Dataset> Size: 216B
    Dimensions:   (index: 3)
    Coordinates:
      * index     (index) int64 24B 0 1 2
    Data variables:
        mass_wet  (index) float64 24B 10.0 9.0 11.0
        mass_dry  (index) float64 24B 9.0 8.0 9.0
        H2O       (index) float64 24B 10.0 11.11 18.18
        Fe        (index) float64 24B 57.0 59.0 61.0
        SiO2      (index) float64 24B 5.2 3.1 2.2
        Al2O3     (index) float64 24B 3.0 1.7 0.9
        LOI       (index) float64 24B 5.0 4.0 3.0
        group     (index) object 24B 'grp_1' 'grp_1' 'grp_2'
    Attributes:
        mc_name:            (0.1 * test data)
        mc_vars_mass:       ['mass_wet', 'mass_dry']
        mc_vars_chem:       ['Fe', 'SiO2', 'Al2O3', 'LOI']
        mc_vars_attrs:      ['group']
        mc_interval_edges:  {}


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>mass_wet</th>
          <th>mass_dry</th>
          <th>H2O</th>
          <th>Fe</th>
          <th>SiO2</th>
          <th>Al2O3</th>
          <th>LOI</th>
        </tr>
        <tr>
          <th>name</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>(0.1 * test data)</th>
          <td>30.0</td>
          <td>26.0</td>
          <td>13.333333</td>
          <td>59.0</td>
          <td>3.515385</td>
          <td>1.873077</td>
          <td>4.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 49-51

.. code-block:: default

    obj_mc_comp.aggregate()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>mass_wet</th>
          <th>mass_dry</th>
          <th>H2O</th>
          <th>Fe</th>
          <th>SiO2</th>
          <th>Al2O3</th>
          <th>LOI</th>
        </tr>
        <tr>
          <th>name</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>(0.9 * test data)</th>
          <td>270.0</td>
          <td>234.0</td>
          <td>13.333333</td>
          <td>59.0</td>
          <td>3.515385</td>
          <td>1.873077</td>
          <td>4.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 52-53

Add the split and complement parts using the mc.add method

.. GENERATED FROM PYTHON SOURCE LINES 54-58

.. code-block:: default


    obj_mc_sum: MassComposition = obj_mc_split + obj_mc_comp
    obj_mc_sum.aggregate()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>mass_wet</th>
          <th>mass_dry</th>
          <th>H2O</th>
          <th>Fe</th>
          <th>SiO2</th>
          <th>Al2O3</th>
          <th>LOI</th>
        </tr>
        <tr>
          <th>name</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>((0.1 * test data) + (0.9 * test data))</th>
          <td>300.0</td>
          <td>260.0</td>
          <td>13.333333</td>
          <td>59.0</td>
          <td>3.515385</td>
          <td>1.873077</td>
          <td>4.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 59-60

Confirm the sum of the splits is materially equivalent to the starting object.

.. GENERATED FROM PYTHON SOURCE LINES 61-64

.. code-block:: default


    pd.testing.assert_frame_equal(obj_mc.data.to_dataframe(), obj_mc_sum.data.to_dataframe())








.. GENERATED FROM PYTHON SOURCE LINES 65-75

Partition by Dimension
----------------------

In mineral processing, unit operations separate particles based on one (or more) property.
Consider a sizing screen, separating by size. The characteristics of such separations can be defined by a function.
The function is often called a partition curve or tromp curve.

First we load a size x assay dataset, with size fractions as the index.
While the data is multidimensional (considering all assays), from the MassComposition object definition it is a 1D
dataset (indexed by size).

.. GENERATED FROM PYTHON SOURCE LINES 76-80

.. code-block:: default


    df_data: pd.DataFrame = size_by_assay()
    df_data






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th></th>
          <th>mass_dry</th>
          <th>fe</th>
          <th>sio2</th>
          <th>al2o3</th>
        </tr>
        <tr>
          <th>size_retained</th>
          <th>size_passing</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0.850</th>
          <th>2.000</th>
          <td>3.3</td>
          <td>64.15</td>
          <td>2.04</td>
          <td>2.68</td>
        </tr>
        <tr>
          <th>0.500</th>
          <th>0.850</th>
          <td>9.9</td>
          <td>64.33</td>
          <td>2.05</td>
          <td>2.23</td>
        </tr>
        <tr>
          <th>0.150</th>
          <th>0.500</th>
          <td>26.5</td>
          <td>64.52</td>
          <td>1.84</td>
          <td>2.19</td>
        </tr>
        <tr>
          <th>0.075</th>
          <th>0.150</th>
          <td>2.5</td>
          <td>62.65</td>
          <td>2.88</td>
          <td>3.32</td>
        </tr>
        <tr>
          <th>0.045</th>
          <th>0.075</th>
          <td>8.8</td>
          <td>62.81</td>
          <td>2.12</td>
          <td>2.25</td>
        </tr>
        <tr>
          <th>0.000</th>
          <th>0.045</th>
          <td>49.0</td>
          <td>55.95</td>
          <td>6.39</td>
          <td>6.34</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 81-82

Create the object

.. GENERATED FROM PYTHON SOURCE LINES 82-87

.. code-block:: default


    mc_size: MassComposition = MassComposition(df_data, name='size sample')
    print(mc_size)
    mc_size.aggregate()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    size sample
    <xarray.Dataset> Size: 336B
    Dimensions:   (size: 6)
    Coordinates:
      * size      (size) object 48B [0.85, 2.0) [0.5, 0.85) ... [0.0, 0.045)
    Data variables:
        mass_wet  (size) float64 48B 3.3 9.9 26.5 2.5 8.8 49.0
        mass_dry  (size) float64 48B 3.3 9.9 26.5 2.5 8.8 49.0
        H2O       (size) float64 48B 0.0 0.0 0.0 0.0 0.0 0.0
        Fe        (size) float64 48B 64.15 64.33 64.52 62.65 62.81 55.95
        SiO2      (size) float64 48B 2.04 2.05 1.84 2.88 2.12 6.39
        Al2O3     (size) float64 48B 2.68 2.23 2.19 3.32 2.25 6.34
    Attributes:
        mc_name:            size sample
        mc_vars_mass:       ['mass_wet', 'mass_dry']
        mc_vars_chem:       ['Fe', 'SiO2', 'Al2O3']
        mc_vars_attrs:      []
        mc_interval_edges:  {'size': {'left': 'retained', 'right': 'passing'}}


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>mass_wet</th>
          <th>mass_dry</th>
          <th>H2O</th>
          <th>Fe</th>
          <th>SiO2</th>
          <th>Al2O3</th>
        </tr>
        <tr>
          <th>name</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>size sample</th>
          <td>100.0</td>
          <td>100.0</td>
          <td>0.0</td>
          <td>60.09245</td>
          <td>4.14753</td>
          <td>4.27716</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 88-89

Visualise the data

.. GENERATED FROM PYTHON SOURCE LINES 89-93

.. code-block:: default


    fig = mc_size.plot_parallel(color='Fe')
    fig






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>                        <script type="text/javascript">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>
            <script charset="utf-8" src="https://cdn.plot.ly/plotly-2.32.0.min.js"></script>                <div id="a1482061-79c7-4751-a3f6-3a3a72b456cb" class="plotly-graph-div" style="height:100%; width:100%;"></div>            <script type="text/javascript">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("a1482061-79c7-4751-a3f6-3a3a72b456cb")) {                    Plotly.newPlot(                        "a1482061-79c7-4751-a3f6-3a3a72b456cb",                        [{"dimensions":[{"label":"size","range":[0.020855198279276652,1.3038404810405297],"values":[1.3038404810405297,0.6519202405202649,0.27386127875258304,0.10606601717798213,0.05809475019311125,0.020855198279276652]},{"label":"mass_wet","range":[2.5,49.0],"values":[3.3,9.9,26.5,2.5,8.8,49.0]},{"label":"mass_dry","range":[2.5,49.0],"values":[3.3,9.9,26.5,2.5,8.8,49.0]},{"label":"H2O","range":[0.0,0.0],"values":[0.0,0.0,0.0,0.0,0.0,0.0]},{"label":"Fe","range":[55.95,64.52],"values":[64.15,64.33,64.52,62.65,62.81,55.95]},{"label":"SiO2","range":[1.84,6.39],"values":[2.04,2.05,1.84,2.88,2.12,6.39]},{"label":"Al2O3","range":[2.19,6.34],"values":[2.68,2.23,2.19,3.32,2.25,6.34]}],"line":{"color":[64.15,64.33,64.52,62.65,62.81,55.95]},"type":"parcoords"}],                        {"template":{"data":{"histogram2dcontour":[{"type":"histogram2dcontour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"choropleth":[{"type":"choropleth","colorbar":{"outlinewidth":0,"ticks":""}}],"histogram2d":[{"type":"histogram2d","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmap":[{"type":"heatmap","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmapgl":[{"type":"heatmapgl","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"type":"contourcarpet","colorbar":{"outlinewidth":0,"ticks":""}}],"contour":[{"type":"contour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"surface":[{"type":"surface","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"type":"mesh3d","colorbar":{"outlinewidth":0,"ticks":""}}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"parcoords":[{"type":"parcoords","line":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolargl":[{"type":"scatterpolargl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"scattergeo":[{"type":"scattergeo","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolar":[{"type":"scatterpolar","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"scattergl":[{"type":"scattergl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatter3d":[{"type":"scatter3d","line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermapbox":[{"type":"scattermapbox","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterternary":[{"type":"scatterternary","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattercarpet":[{"type":"scattercarpet","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"type":"carpet"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}],"barpolar":[{"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"pie":[{"automargin":true,"type":"pie"}]},"layout":{"autotypenumbers":"strict","colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"hovermode":"closest","hoverlabel":{"align":"left"},"paper_bgcolor":"white","plot_bgcolor":"#E5ECF6","polar":{"bgcolor":"#E5ECF6","angularaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"radialaxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"ternary":{"bgcolor":"#E5ECF6","aaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"baxis":{"gridcolor":"white","linecolor":"white","ticks":""},"caxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]]},"xaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"yaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"scene":{"xaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"yaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"zaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"geo":{"bgcolor":"white","landcolor":"#E5ECF6","subunitcolor":"white","showland":true,"showlakes":true,"lakecolor":"white"},"title":{"x":0.05},"mapbox":{"style":"light"}}},"title":{"text":"size sample"}},                        {"responsive": true}                    )                };                            </script>        </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 94-96

We partially initialise the perfect partition function
The dim argument is added to inform the split method which dimension to apply the function/split to

.. GENERATED FROM PYTHON SOURCE LINES 97-100

.. code-block:: default


    partition = partial(perfect, d50=0.150, dim='size')








.. GENERATED FROM PYTHON SOURCE LINES 101-102

Separate the object using the defined partition

.. GENERATED FROM PYTHON SOURCE LINES 103-112

.. code-block:: default


    mc_coarse, mc_fine = mc_size.split_by_partition(partition_definition=partition)
    mc_coarse.name = 'coarse'
    mc_fine.name = 'fine'

    fs: Flowsheet = Flowsheet().from_streams([mc_size, mc_coarse, mc_fine])
    fig = fs.plot_network()
    fig.show()








.. GENERATED FROM PYTHON SOURCE LINES 113-118

.. code-block:: default


    fig = fs.table_plot(table_pos='top',
                         sankey_color_var='Fe', sankey_edge_colormap='copper_r', sankey_vmin=50, sankey_vmax=70)
    # noinspection PyTypeChecker
    plotly.io.show(fig)  # this call to show will set the thumbnail for use in the gallery



.. raw:: html
    :file: images/sphx_glr_109_split_and_partition_001.html






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.849 seconds)


.. _sphx_glr_download_auto_examples_109_split_and_partition.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 109_split_and_partition.py <109_split_and_partition.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 109_split_and_partition.ipynb <109_split_and_partition.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
