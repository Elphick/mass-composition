
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/111_constraints_and_status.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_111_constraints_and_status.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_111_constraints_and_status.py:


Constraints and Status
======================

This example demonstrates how constraints relate to the status property.

It is common for there to exists upper bounds for some analytes, driven by the mineralogical composition.
For example a sample that is expected to be Hematite (Fe2O3) will have a maximum Fe composition of 69.97%.
Setting constraints on the MassComposition object provides assurance that all records in the dataset are within
the specified bounds.

Cases where data is Out of Range (OOR) of the prescribed constraints will result in logged warnings.
Where possible, visualisations will also highlight a status that is not OK (OOR).

.. GENERATED FROM PYTHON SOURCE LINES 16-32

.. code-block:: default


    import logging

    import pandas as pd
    from matplotlib import pyplot as plt

    from elphick.mass_composition import MassComposition
    from elphick.mass_composition.flowsheet import Flowsheet
    from elphick.mass_composition.datasets.sample_data import sample_data

    logging.basicConfig(level=logging.INFO,
                        format='%(asctime)s %(levelname)s %(module)s: %(message)s',
                        datefmt='%Y-%m-%dT%H:%M:%S%z')

    # sphinx_gallery_thumbnail_number = -1








.. GENERATED FROM PYTHON SOURCE LINES 33-37

Create a MassComposition object
-------------------------------

We get some demo data in the form of a pandas DataFrame

.. GENERATED FROM PYTHON SOURCE LINES 38-42

.. code-block:: default


    df_data: pd.DataFrame = sample_data()
    df_data






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>wet_mass</th>
          <th>mass_dry</th>
          <th>FE</th>
          <th>SIO2</th>
          <th>al2o3</th>
          <th>LOI</th>
          <th>group</th>
        </tr>
        <tr>
          <th>index</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>100.0</td>
          <td>90.0</td>
          <td>57.0</td>
          <td>5.2</td>
          <td>3.0</td>
          <td>5.0</td>
          <td>grp_1</td>
        </tr>
        <tr>
          <th>1</th>
          <td>90.0</td>
          <td>80.0</td>
          <td>59.0</td>
          <td>3.1</td>
          <td>1.7</td>
          <td>4.0</td>
          <td>grp_1</td>
        </tr>
        <tr>
          <th>2</th>
          <td>110.0</td>
          <td>90.0</td>
          <td>61.0</td>
          <td>2.2</td>
          <td>0.9</td>
          <td>3.0</td>
          <td>grp_2</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 43-44

Construct a MassComposition object

.. GENERATED FROM PYTHON SOURCE LINES 44-47

.. code-block:: default


    obj_mc: MassComposition = MassComposition(df_data)








.. GENERATED FROM PYTHON SOURCE LINES 48-49

Inspect the default constraints and the status

.. GENERATED FROM PYTHON SOURCE LINES 49-52

.. code-block:: default


    obj_mc.constraints





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    {'mass_wet': [0.0, inf], 'mass_dry': [0.0, inf], 'H2O': [0.0, 100.0], 'Fe': [0.0, 100.0], 'SiO2': [0.0, 100.0], 'Al2O3': [0.0, 100.0], 'LOI': [0.0, 100.0]}



.. GENERATED FROM PYTHON SOURCE LINES 53-55

.. code-block:: default

    print(obj_mc.status)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    status.ok: True
    num_oor: 0




.. GENERATED FROM PYTHON SOURCE LINES 56-57

The status is ok since the data is all in range, so there are no OOR records.

.. GENERATED FROM PYTHON SOURCE LINES 59-63

Modify the constraints to demonstrate OOR data
----------------------------------------------

The Fe upper constraint will be set low enough to demonstrate the OOR case.

.. GENERATED FROM PYTHON SOURCE LINES 63-67

.. code-block:: default


    obj_mc_oor: MassComposition = MassComposition(df_data, constraints={'Fe': [0.0, 60.0]})
    print(obj_mc_oor.status)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2024-05-28T13:06:29+0000 WARNING mc_status: 1 out of range records exist.
    status.ok: False
    num_oor: 1




.. GENERATED FROM PYTHON SOURCE LINES 68-69

We can view the failing records

.. GENERATED FROM PYTHON SOURCE LINES 69-72

.. code-block:: default


    obj_mc_oor.status.oor






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>mass_wet</th>
          <th>mass_dry</th>
          <th>H2O</th>
          <th>Fe</th>
          <th>SiO2</th>
          <th>Al2O3</th>
          <th>LOI</th>
        </tr>
        <tr>
          <th>index</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>2</th>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>61.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 73-79

OOR data within a network
-------------------------

When an object exists in a network with a failing status (with OOR data) it will be coloured red.

We will first construct a simple network and plot it, the network is balanced (across nodes)

.. GENERATED FROM PYTHON SOURCE LINES 79-87

.. code-block:: default


    obj_mc_feed: MassComposition = MassComposition(df_data, name='feed', constraints={'Fe': [0.0, 69.97]})
    obj_mc_1, obj_mc_2 = obj_mc_feed.split(0.4, name_1='stream_1', name_2='stream_2')
    fs: Flowsheet = Flowsheet().from_streams([obj_mc_feed, obj_mc_1, obj_mc_2])
    fs.plot()
    plt.show()
    print(fs.balanced)




.. image-sg:: /auto_examples/images/sphx_glr_111_constraints_and_status_001.png
   :alt: Flowsheet Balanced: True Edge Status OK: True
   :srcset: /auto_examples/images/sphx_glr_111_constraints_and_status_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    True




.. GENERATED FROM PYTHON SOURCE LINES 88-90

Now we will modify the grades of a single stream so that they are OOR.
Note that this will also create a node imbalance that is highlighted red.

.. GENERATED FROM PYTHON SOURCE LINES 90-94

.. code-block:: default


    obj_mc_2.update_data(obj_mc_2.data['Fe'] + 10.0)
    obj_mc_2.data.to_dataframe()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>mass_wet</th>
          <th>mass_dry</th>
          <th>H2O</th>
          <th>Fe</th>
          <th>SiO2</th>
          <th>Al2O3</th>
          <th>LOI</th>
          <th>group</th>
        </tr>
        <tr>
          <th>index</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>60.0</td>
          <td>54.0</td>
          <td>10.000000</td>
          <td>67.0</td>
          <td>5.2</td>
          <td>3.0</td>
          <td>5.0</td>
          <td>grp_1</td>
        </tr>
        <tr>
          <th>1</th>
          <td>54.0</td>
          <td>48.0</td>
          <td>11.111111</td>
          <td>69.0</td>
          <td>3.1</td>
          <td>1.7</td>
          <td>4.0</td>
          <td>grp_1</td>
        </tr>
        <tr>
          <th>2</th>
          <td>66.0</td>
          <td>54.0</td>
          <td>18.181818</td>
          <td>71.0</td>
          <td>2.2</td>
          <td>0.9</td>
          <td>3.0</td>
          <td>grp_2</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 95-99

.. code-block:: default

    fs.plot()
    plt.show()
    print(fs.balanced)




.. image-sg:: /auto_examples/images/sphx_glr_111_constraints_and_status_002.png
   :alt: Flowsheet Balanced: False Edge Status OK: False, {'stream_2': ['Fe']}
   :srcset: /auto_examples/images/sphx_glr_111_constraints_and_status_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2024-05-28T13:06:29+0000 WARNING mc_status: 1 out of range records exist.
    2024-05-28T13:06:29+0000 WARNING mc_status: 1 out of range records exist.
    2024-05-28T13:06:29+0000 WARNING mc_status: 1 out of range records exist.
    2024-05-28T13:06:29+0000 WARNING mc_status: 1 out of range records exist.
    2024-05-28T13:06:29+0000 WARNING mc_status: 1 out of range records exist.
    2024-05-28T13:06:29+0000 WARNING mc_status: 1 out of range records exist.
    2024-05-28T13:06:29+0000 WARNING mc_status: 1 out of range records exist.
    False




.. GENERATED FROM PYTHON SOURCE LINES 100-101

Display the offending edge records

.. GENERATED FROM PYTHON SOURCE LINES 101-104

.. code-block:: default

    print(fs.get_edge_by_name('stream_2').status.failing_components)
    fs.get_edge_by_name('stream_2').status.oor





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ['Fe']


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>mass_wet</th>
          <th>mass_dry</th>
          <th>H2O</th>
          <th>Fe</th>
          <th>SiO2</th>
          <th>Al2O3</th>
          <th>LOI</th>
        </tr>
        <tr>
          <th>index</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>2</th>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>71.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 105-108

The red edge is caused by the Fe of 71.0 on stream_2 exceeding 69.97.

The red node is caused by the mass not balancing across that node - we would expect the imbalance to be in Fe.

.. GENERATED FROM PYTHON SOURCE LINES 108-111

.. code-block:: default


    fs.graph.nodes[1]['mc'].node_balance()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>mass_wet</th>
          <th>mass_dry</th>
          <th>H2O</th>
          <th>Fe</th>
          <th>SiO2</th>
          <th>Al2O3</th>
          <th>LOI</th>
        </tr>
        <tr>
          <th>index</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>-5.4</td>
          <td>-8.881784e-16</td>
          <td>0.000000e+00</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>1</th>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>-4.8</td>
          <td>-4.440892e-16</td>
          <td>2.220446e-16</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>2</th>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>-5.4</td>
          <td>0.000000e+00</td>
          <td>0.000000e+00</td>
          <td>0.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 112-113

We have confirmed the imbalance is in Fe by inspecting the balance across node 1.

.. GENERATED FROM PYTHON SOURCE LINES 115-116

The interactive network plot applies equivalent formatting.

.. GENERATED FROM PYTHON SOURCE LINES 116-119

.. code-block:: default


    fig = fs.plot_network()
    fig




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2024-05-28T13:06:29+0000 WARNING mc_status: 1 out of range records exist.
    2024-05-28T13:06:29+0000 WARNING mc_status: 1 out of range records exist.
    2024-05-28T13:06:29+0000 WARNING mc_status: 1 out of range records exist.
    2024-05-28T13:06:29+0000 WARNING mc_status: 1 out of range records exist.
    2024-05-28T13:06:29+0000 WARNING mc_status: 1 out of range records exist.
    2024-05-28T13:06:29+0000 WARNING mc_status: 1 out of range records exist.
    2024-05-28T13:06:29+0000 WARNING mc_status: 1 out of range records exist.
    2024-05-28T13:06:29+0000 WARNING mc_status: 1 out of range records exist.


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>                        <script type="text/javascript">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>
            <script charset="utf-8" src="https://cdn.plot.ly/plotly-2.32.0.min.js"></script>                <div id="5e8d3115-1380-4270-bf7a-e9c10dd22a0c" class="plotly-graph-div" style="height:100%; width:100%;"></div>            <script type="text/javascript">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("5e8d3115-1380-4270-bf7a-e9c10dd22a0c")) {                    Plotly.newPlot(                        "5e8d3115-1380-4270-bf7a-e9c10dd22a0c",                        [{"hoverinfo":"text","line":{"color":"grey","width":2},"marker":{"angleref":"previous","color":"grey","size":16,"standoff":15,"symbol":"arrow"},"mode":"lines+markers","text":"feed","x":[-1.0,-0.2],"y":[0.0,0.0],"type":"scatter"},{"hoverinfo":"text","line":{"color":"grey","width":2},"marker":{"angleref":"previous","color":"grey","size":16,"standoff":15,"symbol":"arrow"},"mode":"lines+markers","text":"stream_1","x":[-0.2,0.6000000000000001],"y":[0.0,0.4],"type":"scatter"},{"hoverinfo":"text","line":{"color":"red","width":2},"marker":{"angleref":"previous","color":"red","size":16,"standoff":15,"symbol":"arrow"},"mode":"lines+markers","text":"stream_2","x":[-0.2,0.6000000000000001],"y":[0.0,-0.4],"type":"scatter"},{"hoverinfo":"none","marker":{"color":["grey","red","grey","grey"],"line":{"width":2},"size":30},"mode":"markers+text","text":["0","1","2","3"],"x":[-1.0,-0.2,0.6000000000000001,0.6000000000000001],"y":[0.0,0.0,0.4,-0.4],"type":"scatter"},{"hoverinfo":"text","marker":{"color":"grey","line":{"width":1},"size":3},"mode":"markers","text":["feed","stream_1","stream_2"],"x":[-0.6,0.20000000000000004,0.20000000000000004],"y":[0.0,0.2,-0.2],"type":"scatter"}],                        {"hovermode":"closest","margin":{"b":20,"l":5,"r":5,"t":40},"paper_bgcolor":"rgba(0,0,0,0)","plot_bgcolor":"rgba(0,0,0,0)","showlegend":false,"title":{"font":{"size":16},"text":"Flowsheet\u003cbr\u003e\u003cbr\u003e\u003csup\u003eBalanced: False\u003cbr\u003eEdge Status OK: False, {'stream_2': ['Fe']}\u003c\u002fsup\u003e"},"xaxis":{"showgrid":false,"showticklabels":false,"zeroline":false},"yaxis":{"showgrid":false,"showticklabels":false,"zeroline":false},"template":{"data":{"histogram2dcontour":[{"type":"histogram2dcontour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"choropleth":[{"type":"choropleth","colorbar":{"outlinewidth":0,"ticks":""}}],"histogram2d":[{"type":"histogram2d","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmap":[{"type":"heatmap","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmapgl":[{"type":"heatmapgl","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"type":"contourcarpet","colorbar":{"outlinewidth":0,"ticks":""}}],"contour":[{"type":"contour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"surface":[{"type":"surface","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"type":"mesh3d","colorbar":{"outlinewidth":0,"ticks":""}}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"parcoords":[{"type":"parcoords","line":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolargl":[{"type":"scatterpolargl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"scattergeo":[{"type":"scattergeo","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolar":[{"type":"scatterpolar","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"scattergl":[{"type":"scattergl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatter3d":[{"type":"scatter3d","line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermapbox":[{"type":"scattermapbox","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterternary":[{"type":"scatterternary","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattercarpet":[{"type":"scattercarpet","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"type":"carpet"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}],"barpolar":[{"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"pie":[{"automargin":true,"type":"pie"}]},"layout":{"autotypenumbers":"strict","colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"hovermode":"closest","hoverlabel":{"align":"left"},"paper_bgcolor":"white","plot_bgcolor":"#E5ECF6","polar":{"bgcolor":"#E5ECF6","angularaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"radialaxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"ternary":{"bgcolor":"#E5ECF6","aaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"baxis":{"gridcolor":"white","linecolor":"white","ticks":""},"caxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]]},"xaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"yaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"scene":{"xaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"yaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"zaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"geo":{"bgcolor":"white","landcolor":"#E5ECF6","subunitcolor":"white","showland":true,"showlakes":true,"lakecolor":"white"},"title":{"x":0.05},"mapbox":{"style":"light"}}}},                        {"responsive": true}                    )                };                            </script>        </div>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.577 seconds)


.. _sphx_glr_download_auto_examples_111_constraints_and_status.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 111_constraints_and_status.py <111_constraints_and_status.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 111_constraints_and_status.ipynb <111_constraints_and_status.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
