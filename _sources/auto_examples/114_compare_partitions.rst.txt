
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/114_compare_partitions.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_114_compare_partitions.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_114_compare_partitions.py:


Compare Partition Separations
=============================

Demonstrate splitting a single sample and applying two different partition models along a dimension.

We will compare an ideal (perfect) partition with that with the partition model of Napier-Munn (1998)

This demonstrates why using only ore characterisation data to infer plant performance is dangerous.
The robust method uses ore characterisation and process characterisation (partition) data

The two cases tested are:

* IDEAL - Perfect partition, represents using ore characterisation data only
* SIM - Simulated reality with Napier-Munn partition, represents using ore characterisation and
  process characterisation data.

..  note::
    The Ep parameter injected to the Napier-Munn partition is speculative - for illustrative purposes only.

.. GENERATED FROM PYTHON SOURCE LINES 22-34

.. code-block:: default


    import plotly
    import pandas as pd
    from functools import partial

    from elphick.mass_composition.flowsheet import Flowsheet
    from elphick.mass_composition.utils.partition import perfect, napier_munn
    from elphick.mass_composition.datasets.sample_data import size_by_assay
    from elphick.mass_composition import MassComposition

    # sphinx_gallery_thumbnail_number = -1








.. GENERATED FROM PYTHON SOURCE LINES 35-39

Create a mass-composition object
--------------------------------

We get some demo data in the form of a pandas DataFrame

.. GENERATED FROM PYTHON SOURCE LINES 40-49

.. code-block:: default


    df_data: pd.DataFrame = size_by_assay()
    df_data

    # # since we intend to split the sample in half, we'll re-base the original mass to 200,
    # for easier interpretation later.

    df_data['mass_dry'] = df_data['mass_dry'] * 2








.. GENERATED FROM PYTHON SOURCE LINES 50-51

Create the object

.. GENERATED FROM PYTHON SOURCE LINES 51-56

.. code-block:: default


    mc_size: MassComposition = MassComposition(df_data, name='size sample')
    print(mc_size)
    mc_size.aggregate()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    size sample
    <xarray.Dataset> Size: 336B
    Dimensions:   (size: 6)
    Coordinates:
      * size      (size) object 48B [0.85, 2.0) [0.5, 0.85) ... [0.0, 0.045)
    Data variables:
        mass_wet  (size) float64 48B 6.6 19.8 53.0 5.0 17.6 98.0
        mass_dry  (size) float64 48B 6.6 19.8 53.0 5.0 17.6 98.0
        H2O       (size) float64 48B 0.0 0.0 0.0 0.0 0.0 0.0
        Fe        (size) float64 48B 64.15 64.33 64.52 62.65 62.81 55.95
        SiO2      (size) float64 48B 2.04 2.05 1.84 2.88 2.12 6.39
        Al2O3     (size) float64 48B 2.68 2.23 2.19 3.32 2.25 6.34
    Attributes:
        mc_name:            size sample
        mc_vars_mass:       ['mass_wet', 'mass_dry']
        mc_vars_chem:       ['Fe', 'SiO2', 'Al2O3']
        mc_vars_attrs:      []
        mc_interval_edges:  {'size': {'left': 'retained', 'right': 'passing'}}


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>mass_wet</th>
          <th>mass_dry</th>
          <th>H2O</th>
          <th>Fe</th>
          <th>SiO2</th>
          <th>Al2O3</th>
        </tr>
        <tr>
          <th>name</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>size sample</th>
          <td>200.0</td>
          <td>200.0</td>
          <td>0.0</td>
          <td>60.09245</td>
          <td>4.14753</td>
          <td>4.27716</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 57-58

Visualise the data

.. GENERATED FROM PYTHON SOURCE LINES 58-62

.. code-block:: default


    fig = mc_size.plot_parallel(color='Fe')
    fig






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>                        <script type="text/javascript">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>
            <script charset="utf-8" src="https://cdn.plot.ly/plotly-2.32.0.min.js"></script>                <div id="e81b65d2-11e2-453c-8b5d-ffd6f86cae66" class="plotly-graph-div" style="height:100%; width:100%;"></div>            <script type="text/javascript">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("e81b65d2-11e2-453c-8b5d-ffd6f86cae66")) {                    Plotly.newPlot(                        "e81b65d2-11e2-453c-8b5d-ffd6f86cae66",                        [{"dimensions":[{"label":"size","range":[0.020855198279276652,1.3038404810405297],"values":[1.3038404810405297,0.6519202405202649,0.27386127875258304,0.10606601717798213,0.05809475019311125,0.020855198279276652]},{"label":"mass_wet","range":[5.0,98.0],"values":[6.6,19.8,53.0,5.0,17.6,98.0]},{"label":"mass_dry","range":[5.0,98.0],"values":[6.6,19.8,53.0,5.0,17.6,98.0]},{"label":"H2O","range":[0.0,0.0],"values":[0.0,0.0,0.0,0.0,0.0,0.0]},{"label":"Fe","range":[55.95,64.52],"values":[64.15,64.33,64.52,62.65,62.81,55.95]},{"label":"SiO2","range":[1.84,6.39],"values":[2.04,2.05,1.84,2.88,2.12,6.39]},{"label":"Al2O3","range":[2.19,6.34],"values":[2.68,2.23,2.19,3.32,2.25,6.34]}],"line":{"color":[64.15,64.33,64.52,62.65,62.81,55.95]},"type":"parcoords"}],                        {"template":{"data":{"histogram2dcontour":[{"type":"histogram2dcontour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"choropleth":[{"type":"choropleth","colorbar":{"outlinewidth":0,"ticks":""}}],"histogram2d":[{"type":"histogram2d","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmap":[{"type":"heatmap","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmapgl":[{"type":"heatmapgl","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"type":"contourcarpet","colorbar":{"outlinewidth":0,"ticks":""}}],"contour":[{"type":"contour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"surface":[{"type":"surface","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"type":"mesh3d","colorbar":{"outlinewidth":0,"ticks":""}}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"parcoords":[{"type":"parcoords","line":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolargl":[{"type":"scatterpolargl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"scattergeo":[{"type":"scattergeo","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolar":[{"type":"scatterpolar","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"scattergl":[{"type":"scattergl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatter3d":[{"type":"scatter3d","line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermapbox":[{"type":"scattermapbox","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterternary":[{"type":"scatterternary","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattercarpet":[{"type":"scattercarpet","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"type":"carpet"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}],"barpolar":[{"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"pie":[{"automargin":true,"type":"pie"}]},"layout":{"autotypenumbers":"strict","colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"hovermode":"closest","hoverlabel":{"align":"left"},"paper_bgcolor":"white","plot_bgcolor":"#E5ECF6","polar":{"bgcolor":"#E5ECF6","angularaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"radialaxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"ternary":{"bgcolor":"#E5ECF6","aaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"baxis":{"gridcolor":"white","linecolor":"white","ticks":""},"caxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]]},"xaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"yaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"scene":{"xaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"yaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"zaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"geo":{"bgcolor":"white","landcolor":"#E5ECF6","subunitcolor":"white","showland":true,"showlakes":true,"lakecolor":"white"},"title":{"x":0.05},"mapbox":{"style":"light"}}},"title":{"text":"size sample"}},                        {"responsive": true}                    )                };                            </script>        </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 63-65

Split the Sample
----------------

.. GENERATED FROM PYTHON SOURCE LINES 65-68

.. code-block:: default


    mc_ideal_feed, mc_sim_feed = mc_size.split(0.5, 'ideal feed', 'sim feed')








.. GENERATED FROM PYTHON SOURCE LINES 69-74

Apply the Partitions
--------------------

We partially initialise the two partitions
The dim argument is added to inform the split method which dimension to apply the function/split to

.. GENERATED FROM PYTHON SOURCE LINES 74-78

.. code-block:: default


    part_ideal = partial(perfect, d50=0.150, dim='size')
    part_sim = partial(napier_munn, d50=0.150, ep=0.1, dim='size')








.. GENERATED FROM PYTHON SOURCE LINES 79-80

Separate the object using the defined partitions

.. GENERATED FROM PYTHON SOURCE LINES 81-96

.. code-block:: default


    mc_ideal_coarse, mc_ideal_fine = mc_ideal_feed.split_by_partition(partition_definition=part_ideal,
                                                                      name_1='ideal_coarse', name_2='ideal_fine')
    mc_sim_coarse, mc_sim_fine = mc_sim_feed.split_by_partition(partition_definition=part_sim, name_1='sim_coarse', name_2='sim_fine')


    fs: Flowsheet = Flowsheet().from_streams([mc_size, mc_ideal_feed, mc_sim_feed,
                                               mc_ideal_coarse, mc_ideal_fine,
                                               mc_sim_coarse, mc_sim_fine])

    fig = fs.table_plot(table_pos='left',
                         sankey_color_var='Fe', sankey_edge_colormap='copper_r', sankey_vmin=50, sankey_vmax=70)
    # noinspection PyTypeChecker
    plotly.io.show(fig)  # this call to show will set the thumbnail for use in the gallery




.. raw:: html
    :file: images/sphx_glr_114_compare_partitions_001.html





.. GENERATED FROM PYTHON SOURCE LINES 97-103

..  note::
    The mass split and grades are different as shown in the table above.
    The difference in coarse yield (mass recovery) of the two cases is 7.4%.
    More work reviewing recovery of components in both cases would be prudent.
    This is illustrative only but demonstrates why using ore characterisation and ignoring
    process characterisation to capture the real world process inefficiencies is dangerous.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.973 seconds)


.. _sphx_glr_download_auto_examples_114_compare_partitions.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 114_compare_partitions.py <114_compare_partitions.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 114_compare_partitions.ipynb <114_compare_partitions.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
