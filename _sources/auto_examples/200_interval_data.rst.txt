
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/200_interval_data.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_200_interval_data.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_200_interval_data.py:


Interval Data
=============

This example adds a second dimension.  The second dimension is an interval, of the form interval_from, interval_to.
It is also known as binned data, where each 'bin' is bounded between and upper and lower limit.

An interval is relevant in geology, when analysing drill hole data.

Intervals are also encountered in metallurgy, but in that discipline they are often called fractions,
e.g. size fractions.  In that case the typical nomenclature is size_retained, size passing, since the data
originates from a sieve stack.

.. GENERATED FROM PYTHON SOURCE LINES 15-24

.. code-block:: default

    import logging

    import pandas as pd
    from matplotlib import pyplot as plt

    from elphick.mass_composition import MassComposition
    from elphick.mass_composition.datasets.sample_data import iron_ore_sample_data









.. GENERATED FROM PYTHON SOURCE LINES 25-30

.. code-block:: default

    logging.basicConfig(level=logging.INFO,
                        format='%(asctime)s %(levelname)s %(module)s - %(funcName)s: %(message)s',
                        datefmt='%Y-%m-%dT%H:%M:%S%z',
                        )








.. GENERATED FROM PYTHON SOURCE LINES 31-36

Create a MassComposition object
-------------------------------

We get some demo data in the form of a pandas DataFrame
We create this object as 1D based on the pandas index

.. GENERATED FROM PYTHON SOURCE LINES 37-41

.. code-block:: default


    df_data: pd.DataFrame = iron_ore_sample_data()
    df_data.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>mass_dry</th>
          <th>H2O</th>
          <th>MgO</th>
          <th>MnO</th>
          <th>Al2O3</th>
          <th>P</th>
          <th>Fe</th>
          <th>SiO2</th>
          <th>TiO2</th>
          <th>CaO</th>
          <th>Na2O</th>
          <th>K2O</th>
          <th>DHID</th>
          <th>interval_from</th>
          <th>interval_to</th>
        </tr>
        <tr>
          <th>index</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>6</th>
          <td>2.12</td>
          <td>0.35</td>
          <td>0.07</td>
          <td>0.0</td>
          <td>1.48</td>
          <td>0.019</td>
          <td>64.30</td>
          <td>3.23</td>
          <td>0.080</td>
          <td>0.04</td>
          <td>0.01</td>
          <td>0.03</td>
          <td>CBS02</td>
          <td>26.60</td>
          <td>26.85</td>
        </tr>
        <tr>
          <th>7</th>
          <td>2.06</td>
          <td>0.23</td>
          <td>0.06</td>
          <td>0.0</td>
          <td>1.28</td>
          <td>0.017</td>
          <td>64.91</td>
          <td>2.90</td>
          <td>0.082</td>
          <td>0.04</td>
          <td>0.01</td>
          <td>0.03</td>
          <td>CBS02</td>
          <td>26.85</td>
          <td>27.10</td>
        </tr>
        <tr>
          <th>9</th>
          <td>1.91</td>
          <td>0.23</td>
          <td>0.06</td>
          <td>0.0</td>
          <td>1.01</td>
          <td>0.016</td>
          <td>65.09</td>
          <td>2.39</td>
          <td>0.059</td>
          <td>0.03</td>
          <td>0.01</td>
          <td>0.02</td>
          <td>CBS02</td>
          <td>27.70</td>
          <td>28.00</td>
        </tr>
        <tr>
          <th>10</th>
          <td>1.96</td>
          <td>0.36</td>
          <td>0.06</td>
          <td>0.0</td>
          <td>0.99</td>
          <td>0.022</td>
          <td>65.03</td>
          <td>2.22</td>
          <td>0.057</td>
          <td>0.04</td>
          <td>0.01</td>
          <td>0.02</td>
          <td>CBS02</td>
          <td>28.00</td>
          <td>28.30</td>
        </tr>
        <tr>
          <th>12</th>
          <td>2.06</td>
          <td>0.40</td>
          <td>0.05</td>
          <td>0.0</td>
          <td>0.75</td>
          <td>0.016</td>
          <td>65.87</td>
          <td>1.69</td>
          <td>0.040</td>
          <td>0.03</td>
          <td>0.01</td>
          <td>0.01</td>
          <td>CBS02</td>
          <td>28.60</td>
          <td>28.95</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 42-48

.. code-block:: default


    obj_mc: MassComposition = MassComposition(df_data,
                                              name='Drill program',
                                              mass_units='kg')
    obj_mc





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <elphick.mass_composition.mass_composition.MassComposition object at 0x7f3958f41420>



.. GENERATED FROM PYTHON SOURCE LINES 49-52

.. code-block:: default


    obj_mc.aggregate()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>mass_wet</th>
          <th>mass_dry</th>
          <th>H2O</th>
          <th>MgO</th>
          <th>MnO</th>
          <th>Al2O3</th>
          <th>P</th>
          <th>Fe</th>
          <th>SiO2</th>
          <th>TiO2</th>
          <th>CaO</th>
          <th>Na2O</th>
          <th>K2O</th>
        </tr>
        <tr>
          <th>name</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>Drill program</th>
          <td>2029.617808</td>
          <td>1981.688</td>
          <td>2.361519</td>
          <td>0.080513</td>
          <td>0.149219</td>
          <td>1.773585</td>
          <td>0.044628</td>
          <td>60.443938</td>
          <td>2.82721</td>
          <td>0.062978</td>
          <td>0.125071</td>
          <td>0.015877</td>
          <td>0.013164</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 53-55

.. code-block:: default

    obj_mc.aggregate('DHID')






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>mass_wet</th>
          <th>mass_dry</th>
          <th>H2O</th>
          <th>MgO</th>
          <th>MnO</th>
          <th>Al2O3</th>
          <th>P</th>
          <th>Fe</th>
          <th>SiO2</th>
          <th>TiO2</th>
          <th>CaO</th>
          <th>Na2O</th>
          <th>K2O</th>
        </tr>
        <tr>
          <th>DHID</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>CBS02</th>
          <td>46.614043</td>
          <td>46.310</td>
          <td>0.652257</td>
          <td>0.055636</td>
          <td>0.000000</td>
          <td>1.029685</td>
          <td>0.022764</td>
          <td>64.656675</td>
          <td>2.589849</td>
          <td>0.053834</td>
          <td>0.029160</td>
          <td>0.010436</td>
          <td>0.017296</td>
        </tr>
        <tr>
          <th>CBS03</th>
          <td>229.414089</td>
          <td>226.250</td>
          <td>1.379204</td>
          <td>0.132968</td>
          <td>0.038134</td>
          <td>1.399500</td>
          <td>0.046587</td>
          <td>60.297271</td>
          <td>3.653106</td>
          <td>0.052016</td>
          <td>0.699112</td>
          <td>0.030318</td>
          <td>0.019871</td>
        </tr>
        <tr>
          <th>CBS04</th>
          <td>347.440438</td>
          <td>344.680</td>
          <td>0.794507</td>
          <td>0.088788</td>
          <td>0.126484</td>
          <td>1.513147</td>
          <td>0.038461</td>
          <td>60.289083</td>
          <td>3.319658</td>
          <td>0.050986</td>
          <td>0.093096</td>
          <td>0.001773</td>
          <td>0.011788</td>
        </tr>
        <tr>
          <th>CBS10</th>
          <td>306.500146</td>
          <td>304.690</td>
          <td>0.590586</td>
          <td>0.044836</td>
          <td>0.091520</td>
          <td>1.963728</td>
          <td>0.059062</td>
          <td>61.001839</td>
          <td>2.949455</td>
          <td>0.061461</td>
          <td>0.060045</td>
          <td>0.014310</td>
          <td>0.012509</td>
        </tr>
        <tr>
          <th>CBS12</th>
          <td>506.098042</td>
          <td>493.968</td>
          <td>2.396777</td>
          <td>0.090723</td>
          <td>0.247394</td>
          <td>1.854824</td>
          <td>0.032990</td>
          <td>60.572344</td>
          <td>2.491186</td>
          <td>0.067683</td>
          <td>0.045545</td>
          <td>0.016941</td>
          <td>0.014323</td>
        </tr>
        <tr>
          <th>CBS13</th>
          <td>593.551050</td>
          <td>565.790</td>
          <td>4.677112</td>
          <td>0.066832</td>
          <td>0.165065</td>
          <td>1.969400</td>
          <td>0.051777</td>
          <td>59.839565</td>
          <td>2.443914</td>
          <td>0.072125</td>
          <td>0.027301</td>
          <td>0.019054</td>
          <td>0.010321</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 56-59

We will now make a 2D dataset using DHID and the interval.
We will first create a mean interval variable.  Then we will set the dataframe index to both variables before
constructing the object.

.. GENERATED FROM PYTHON SOURCE LINES 60-77

.. code-block:: default


    print(df_data.columns)

    df_data['DHID'] = df_data['DHID'].astype('category')
    # make an int based drillhole identifier
    code, dh_id = pd.factorize(df_data['DHID'])
    df_data['DH'] = code
    df_data = df_data.reset_index().set_index(['DH', 'interval_from', 'interval_to'])

    obj_mc_2d: MassComposition = MassComposition(df_data,
                                                 name='Drill program',
                                                 mass_units='kg')
    # obj_mc_2d._data.assign(hole_id=dh_id)
    print(obj_mc_2d)
    print(obj_mc_2d.aggregate())
    print(obj_mc_2d.aggregate('DHID'))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Index(['mass_dry', 'H2O', 'MgO', 'MnO', 'Al2O3', 'P', 'Fe', 'SiO2', 'TiO2',
           'CaO', 'Na2O', 'K2O', 'DHID', 'interval_from', 'interval_to'],
          dtype='object')

    Drill program
    <xarray.Dataset> Size: 90kB
    Dimensions:   (DH: 6, interval: 123)
    Coordinates:
      * DH        (DH) int64 48B 0 1 2 3 4 5
      * interval  (interval) object 984B [7.5, 7.8) [7.8, 8.2) ... [39.25, 39.6)
    Data variables: (12/15)
        mass_wet  (DH, interval) float64 6kB nan nan nan nan ... 18.26 18.57 17.01
        mass_dry  (DH, interval) float64 6kB nan nan nan nan ... 17.4 17.76 16.54
        H2O       (DH, interval) float64 6kB nan nan nan nan ... 4.56 4.72 4.34 2.76
        MgO       (DH, interval) float64 6kB nan nan nan nan ... 0.06 0.06 0.06 0.05
        MnO       (DH, interval) float64 6kB nan nan nan nan ... 0.09 0.1 0.08 0.06
        Al2O3     (DH, interval) float64 6kB nan nan nan nan ... 1.5 1.55 1.58 1.41
        ...        ...
        TiO2      (DH, interval) float64 6kB nan nan nan nan ... 0.057 0.058 0.052
        CaO       (DH, interval) float64 6kB nan nan nan nan ... 0.03 0.03 0.03 0.03
        Na2O      (DH, interval) float64 6kB nan nan nan nan ... 0.02 0.02 0.03 0.02
        K2O       (DH, interval) float64 6kB nan nan nan nan ... 0.01 0.01 0.01 0.01
        index     (DH, interval) float64 6kB nan nan nan nan ... 460.0 461.0 462.0
        DHID      (DH, interval) object 6kB nan nan nan ... 'CBS13' 'CBS13' 'CBS13'
    Attributes:
        mc_name:            Drill program
        mc_vars_mass:       ['mass_wet', 'mass_dry']
        mc_vars_chem:       ['MgO', 'MnO', 'Al2O3', 'P', 'Fe', 'SiO2', 'TiO2', 'C...
        mc_vars_attrs:      ['index', 'DHID']
        mc_interval_edges:  {'interval': {'left': 'from', 'right': 'to'}}
                      mass_wet  mass_dry       H2O  ...       CaO      Na2O       K2O
    name                                            ...                              
    Drill program  2029.617808  1981.688  2.361519  ...  0.125071  0.015877  0.013164

    [1 rows x 13 columns]
             mass_wet  mass_dry       H2O  ...       CaO      Na2O       K2O
    DHID                                   ...                              
    CBS02   46.614043    46.310  0.652257  ...  0.029160  0.010436  0.017296
    CBS03  229.414089   226.250  1.379204  ...  0.699112  0.030318  0.019871
    CBS04  347.440438   344.680  0.794507  ...  0.093096  0.001773  0.011788
    CBS10  306.500146   304.690  0.590586  ...  0.060045  0.014310  0.012509
    CBS12  506.098042   493.968  2.396777  ...  0.045545  0.016941  0.014323
    CBS13  593.551050   565.790  4.677112  ...  0.027301  0.019054  0.010321

    [6 rows x 13 columns]




.. GENERATED FROM PYTHON SOURCE LINES 78-81

View some plots

First confirm the parallel plot still works

.. GENERATED FROM PYTHON SOURCE LINES 82-93

.. code-block:: default


    # TODO: work on the display order
    # TODO - fails for DH (integer)

    # fig: Figure = obj_mc_2d.plot_parallel(color='Fe')
    # fig.show()

    # now plot using the xarray data - take advantage of the multi-dim nature of the package

    obj_mc_2d.data['Fe'].plot()
    plt.show()



.. image-sg:: /auto_examples/images/sphx_glr_200_interval_data_001.png
   :alt: 200 interval data
   :srcset: /auto_examples/images/sphx_glr_200_interval_data_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.961 seconds)


.. _sphx_glr_download_auto_examples_200_interval_data.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 200_interval_data.py <200_interval_data.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 200_interval_data.ipynb <200_interval_data.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
