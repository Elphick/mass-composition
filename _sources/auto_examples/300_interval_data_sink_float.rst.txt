
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/300_interval_data_sink_float.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_300_interval_data_sink_float.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_300_interval_data_sink_float.py:


Interval Data - Sink Float
==========================

Intervals are encountered in Metallurgy, aka fractions,
e.g. size fractions.  In that case the typical nomenclature is size_retained, size passing, since the data
originates from a sieve stack.

The Sink Float metallurgical test splits/fractionates samples by density.  The density fraction is often conducted by
size fraction, resulting in 2D fractionation (interval) data.

.. GENERATED FROM PYTHON SOURCE LINES 13-29

.. code-block:: default


    import logging
    from functools import partial
    from pathlib import Path

    import pandas as pd
    # noinspection PyUnresolvedReferences
    import numpy as np
    import plotly

    from elphick.mass_composition import MassComposition
    from elphick.mass_composition.datasets import datasets
    from elphick.mass_composition.datasets.sample_data import size_by_assay
    from elphick.mass_composition.flowsheet import Flowsheet
    from elphick.mass_composition.utils.partition import napier_munn








.. GENERATED FROM PYTHON SOURCE LINES 30-34

.. code-block:: default

    logging.basicConfig(level=logging.INFO,
                        format='%(asctime)s %(levelname)s %(module)s - %(funcName)s: %(message)s',
                        datefmt='%Y-%m-%dT%H:%M:%S%z')








.. GENERATED FROM PYTHON SOURCE LINES 35-39

Load Data
---------

We load some real data.

.. GENERATED FROM PYTHON SOURCE LINES 40-44

.. code-block:: default


    df_data: pd.DataFrame = datasets.load_nordic_iron_ore_sink_float()
    df_data






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>size_retained</th>
          <th>size_passing</th>
          <th>density_lo</th>
          <th>density_hi</th>
          <th>mass_pct</th>
          <th>Fe</th>
          <th>SiO2</th>
          <th>P</th>
          <th>TiO2</th>
          <th>V</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>1.000</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>0.4</td>
          <td>22.7</td>
          <td>50.9</td>
          <td>0.042</td>
          <td>0.170</td>
          <td>0.0049</td>
        </tr>
        <tr>
          <th>1</th>
          <td>0.100</td>
          <td>1.000</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>67.1</td>
          <td>27.3</td>
          <td>47.7</td>
          <td>0.107</td>
          <td>0.178</td>
          <td>0.0062</td>
        </tr>
        <tr>
          <th>2</th>
          <td>0.063</td>
          <td>0.100</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>12.7</td>
          <td>18.0</td>
          <td>57.8</td>
          <td>0.440</td>
          <td>0.200</td>
          <td>0.0056</td>
        </tr>
        <tr>
          <th>3</th>
          <td>0.040</td>
          <td>0.063</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>8.2</td>
          <td>16.9</td>
          <td>57.1</td>
          <td>0.610</td>
          <td>0.235</td>
          <td>0.0057</td>
        </tr>
        <tr>
          <th>4</th>
          <td>0.000</td>
          <td>0.040</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>11.6</td>
          <td>19.4</td>
          <td>51.6</td>
          <td>0.650</td>
          <td>0.310</td>
          <td>0.0072</td>
        </tr>
        <tr>
          <th>5</th>
          <td>0.100</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>2.7</td>
          <td>54.2</td>
          <td>1.2</td>
          <td>1.6</td>
          <td>0.180</td>
          <td>0.084</td>
          <td>0.0030</td>
        </tr>
        <tr>
          <th>6</th>
          <td>0.100</td>
          <td>NaN</td>
          <td>2.7</td>
          <td>3.3</td>
          <td>9.7</td>
          <td>16.6</td>
          <td>42.6</td>
          <td>0.980</td>
          <td>0.380</td>
          <td>0.0100</td>
        </tr>
        <tr>
          <th>7</th>
          <td>0.100</td>
          <td>NaN</td>
          <td>3.3</td>
          <td>NaN</td>
          <td>36.1</td>
          <td>68.0</td>
          <td>78.8</td>
          <td>0.033</td>
          <td>0.285</td>
          <td>0.0120</td>
        </tr>
        <tr>
          <th>8</th>
          <td>0.063</td>
          <td>0.100</td>
          <td>NaN</td>
          <td>2.7</td>
          <td>24.0</td>
          <td>1.2</td>
          <td>79.5</td>
          <td>0.015</td>
          <td>0.060</td>
          <td>0.0070</td>
        </tr>
        <tr>
          <th>9</th>
          <td>0.063</td>
          <td>0.100</td>
          <td>2.7</td>
          <td>3.3</td>
          <td>11.9</td>
          <td>10.2</td>
          <td>54.0</td>
          <td>2.320</td>
          <td>0.280</td>
          <td>0.0080</td>
        </tr>
        <tr>
          <th>10</th>
          <td>0.063</td>
          <td>0.100</td>
          <td>3.3</td>
          <td>NaN</td>
          <td>64.1</td>
          <td>67.1</td>
          <td>1.4</td>
          <td>0.174</td>
          <td>0.530</td>
          <td>0.0020</td>
        </tr>
        <tr>
          <th>11</th>
          <td>0.040</td>
          <td>0.063</td>
          <td>NaN</td>
          <td>2.7</td>
          <td>76.6</td>
          <td>3.1</td>
          <td>71.3</td>
          <td>0.850</td>
          <td>0.145</td>
          <td>0.0130</td>
        </tr>
        <tr>
          <th>12</th>
          <td>0.040</td>
          <td>0.063</td>
          <td>2.7</td>
          <td>3.3</td>
          <td>4.3</td>
          <td>28.5</td>
          <td>24.5</td>
          <td>2.780</td>
          <td>0.460</td>
          <td>0.1100</td>
        </tr>
        <tr>
          <th>13</th>
          <td>0.040</td>
          <td>0.063</td>
          <td>3.3</td>
          <td>NaN</td>
          <td>19.1</td>
          <td>68.6</td>
          <td>0.6</td>
          <td>0.069</td>
          <td>0.480</td>
          <td>0.0130</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 45-47

The dataset contains size x assay, plus size x density x assay data.  We'll drop the size x assay data to leave the
sink / float data.

.. GENERATED FROM PYTHON SOURCE LINES 47-51

.. code-block:: default


    # df_sink_float: pd.DataFrame = df_data.query('density_lo != np.nan and density_hi != np.nan')
    # df_sink_float









.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.346 seconds)


.. _sphx_glr_download_auto_examples_300_interval_data_sink_float.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 300_interval_data_sink_float.py <300_interval_data_sink_float.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 300_interval_data_sink_float.ipynb <300_interval_data_sink_float.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
