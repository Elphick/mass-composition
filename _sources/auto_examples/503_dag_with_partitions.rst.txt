
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/503_dag_with_partitions.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_503_dag_with_partitions.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_503_dag_with_partitions.py:


DAG with Partitions
===================

In the context of this script, partitions are used to divide the data into different segments based on certain
criteria. These partitions are defined using the napier_munn function, which is partially applied to set the d50
and ep parameters. The dim argument is used to select the dimension to partition on.

The partitions are then used in the Directed Acyclic Graph (DAG) to define the relationships between streams
resulting from transformations (operations) on the streams.

Each node in the DAG represents an operation on one or more streams, and the edges represent the flow of data
from one operation to the next.  The DAG, along with the defined partitions, can be used to simulate
the network of operations and produce the final results. This approach allows for the management of
complex relationships between streams in stream operations.

.. GENERATED FROM PYTHON SOURCE LINES 17-32

.. code-block:: default

    import logging
    from copy import deepcopy
    from functools import partial

    import plotly

    from elphick.mass_composition import MassComposition, Stream
    from elphick.mass_composition.dag import DAG
    from elphick.mass_composition.datasets.sample_data import size_by_assay
    from elphick.mass_composition.flowsheet import Flowsheet
    from elphick.mass_composition.utils.partition import napier_munn

    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    logger = logging.getLogger(__name__)








.. GENERATED FROM PYTHON SOURCE LINES 33-39

Define the Partitions
---------------------

These partitions are defined in the `napier_munn` function.  The function is partially applied to set the d50 and ep.
The `dim` argument is used to select the dimension to partition on.
These have no basis in reality and are for illustrative purposes only.

.. GENERATED FROM PYTHON SOURCE LINES 39-45

.. code-block:: default


    part_screen = partial(napier_munn, d50=0.5, ep=0.2, dim='size')
    part_rgr_cyclone = partial(napier_munn, d50=0.045, ep=0.1, dim='size')
    part_clr_cyclone = partial(napier_munn, d50=0.038, ep=0.1, dim='size')
    part_scav_cyclone = partial(napier_munn, d50=0.045, ep=0.1, dim='size')








.. GENERATED FROM PYTHON SOURCE LINES 46-51

Define the DAG
--------------

The DAG is defined by adding nodes to the graph.  Each node is an input, output or Stream operation
(e.g. add, split, etc.).  The nodes are connected by the streams they operate on.

.. GENERATED FROM PYTHON SOURCE LINES 51-71

.. code-block:: default


    mc_sample: MassComposition = MassComposition(size_by_assay(), name='sample')

    dag = DAG(n_jobs=1)
    dag.add_input(name='feed')
    dag.add_step(name='screen', operation=Stream.split_by_partition, streams=['feed'],
                 kwargs={'partition_definition': part_screen, 'name_1': 'oversize', 'name_2': 'undersize'})
    dag.add_step(name='rougher', operation=Stream.split_by_partition, streams=['undersize'],
                 kwargs={'partition_definition': part_rgr_cyclone, 'name_1': 'rgr_uf', 'name_2': 'rgr_of'})
    dag.add_step(name='cleaner', operation=Stream.split_by_partition, streams=['rgr_uf'],
                 kwargs={'partition_definition': part_clr_cyclone, 'name_1': 'clr_uf', 'name_2': 'clr_of'})
    dag.add_step(name='scavenger', operation=Stream.split_by_partition, streams=['rgr_of'],
                 kwargs={'partition_definition': part_scav_cyclone, 'name_1': 'scav_uf', 'name_2': 'scav_of'})
    dag.add_step(name='overflow', operation=Stream.add, streams=['scav_of', 'clr_of'],
                 kwargs={'name': 'tailings'})
    dag.add_step(name='joiner', operation=Stream.add, streams=['oversize', 'clr_uf', 'scav_uf'],
                 kwargs={'name': 'product'})
    dag.add_output(name='reject', stream='tailings')
    dag.add_output(name='product', stream='product')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <elphick.mass_composition.dag.DAG object at 0x7f3958962200>



.. GENERATED FROM PYTHON SOURCE LINES 72-77

Run the DAG
-----------

The dag is run by providing MassComposition (or Stream) objects for all inputs.  They must be compatible i.e. have the
same indexes.

.. GENERATED FROM PYTHON SOURCE LINES 77-80

.. code-block:: default


    dag.run({'feed': mc_sample}, progress_bar=True)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Executing nodes:   0%|          | 0/9 [00:00<?, ?node/s]    Executing nodes:   0%|          | 0/9 [00:00<?, ?node/s, Processed node: feed]    Executing nodes:  11%|#1        | 1/9 [00:00<00:01,  7.15node/s, Processed node: screen]    Executing nodes:  22%|##2       | 2/9 [00:00<00:00, 14.28node/s, Processed node: screen]    Executing nodes:  22%|##2       | 2/9 [00:00<00:00, 14.28node/s, Processed node: rougher]    Executing nodes:  33%|###3      | 3/9 [00:00<00:00, 14.28node/s, Processed node: cleaner]    Executing nodes:  44%|####4     | 4/9 [00:00<00:00,  8.48node/s, Processed node: cleaner]    Executing nodes:  44%|####4     | 4/9 [00:00<00:00,  8.48node/s, Processed node: scavenger]    Executing nodes:  56%|#####5    | 5/9 [00:00<00:00,  8.48node/s, Processed node: overflow]     Executing nodes:  67%|######6   | 6/9 [00:00<00:00,  8.06node/s, Processed node: overflow]    Executing nodes:  67%|######6   | 6/9 [00:00<00:00,  8.06node/s, Processed node: joiner]      Executing nodes:  78%|#######7  | 7/9 [00:00<00:00,  8.06node/s, Processed node: reject]    Executing nodes:  89%|########8 | 8/9 [00:00<00:00,  8.06node/s, Processed node: product]    Executing nodes: 100%|##########| 9/9 [00:00<00:00, 12.75node/s, Processed node: product]




.. GENERATED FROM PYTHON SOURCE LINES 81-82

Create a Flowsheet object from the dag, enabling all the usual network plotting and analysis methods.

.. GENERATED FROM PYTHON SOURCE LINES 82-88

.. code-block:: default


    fs: Flowsheet = Flowsheet.from_dag(dag)

    fig = fs.plot_network()
    fig






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>                        <script type="text/javascript">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>
            <script charset="utf-8" src="https://cdn.plot.ly/plotly-2.32.0.min.js"></script>                <div id="db668e52-49f2-458b-8dab-db1d35e45511" class="plotly-graph-div" style="height:100%; width:100%;"></div>            <script type="text/javascript">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("db668e52-49f2-458b-8dab-db1d35e45511")) {                    Plotly.newPlot(                        "db668e52-49f2-458b-8dab-db1d35e45511",                        [{"hoverinfo":"text","line":{"color":"grey","width":2},"marker":{"angleref":"previous","color":"grey","size":16,"standoff":15,"symbol":"arrow"},"mode":"lines+markers","text":"sample","x":[-1.0,-0.6086956521739131],"y":[0.0,0.0],"type":"scatter"},{"hoverinfo":"text","line":{"color":"grey","width":2},"marker":{"angleref":"previous","color":"grey","size":16,"standoff":15,"symbol":"arrow"},"mode":"lines+markers","text":"undersize","x":[-0.6086956521739131,-0.2173913043478261],"y":[0.0,0.1956521739130435],"type":"scatter"},{"hoverinfo":"text","line":{"color":"grey","width":2},"marker":{"angleref":"previous","color":"grey","size":16,"standoff":15,"symbol":"arrow"},"mode":"lines+markers","text":"oversize","x":[-0.6086956521739131,-0.2173913043478261],"y":[0.0,-0.1956521739130435],"type":"scatter"},{"hoverinfo":"text","line":{"color":"grey","width":2},"marker":{"angleref":"previous","color":"grey","size":16,"standoff":15,"symbol":"arrow"},"mode":"lines+markers","text":"rgr_uf","x":[-0.2173913043478261,0.17391304347826086],"y":[0.1956521739130435,0.391304347826087],"type":"scatter"},{"hoverinfo":"text","line":{"color":"grey","width":2},"marker":{"angleref":"previous","color":"grey","size":16,"standoff":15,"symbol":"arrow"},"mode":"lines+markers","text":"rgr_of","x":[-0.2173913043478261,0.17391304347826086],"y":[0.1956521739130435,0.0],"type":"scatter"},{"hoverinfo":"text","line":{"color":"grey","width":2},"marker":{"angleref":"previous","color":"grey","size":16,"standoff":15,"symbol":"arrow"},"mode":"lines+markers","text":"clr_of","x":[0.17391304347826086,0.5652173913043479],"y":[0.391304347826087,0.0],"type":"scatter"},{"hoverinfo":"text","line":{"color":"grey","width":2},"marker":{"angleref":"previous","color":"grey","size":16,"standoff":15,"symbol":"arrow"},"mode":"lines+markers","text":"clr_uf","x":[0.17391304347826086,-0.2173913043478261],"y":[0.391304347826087,-0.1956521739130435],"type":"scatter"},{"hoverinfo":"text","line":{"color":"grey","width":2},"marker":{"angleref":"previous","color":"grey","size":16,"standoff":15,"symbol":"arrow"},"mode":"lines+markers","text":"scav_of","x":[0.17391304347826086,0.5652173913043479],"y":[0.0,0.0],"type":"scatter"},{"hoverinfo":"text","line":{"color":"grey","width":2},"marker":{"angleref":"previous","color":"grey","size":16,"standoff":15,"symbol":"arrow"},"mode":"lines+markers","text":"scav_uf","x":[0.17391304347826086,-0.2173913043478261],"y":[0.0,-0.1956521739130435],"type":"scatter"},{"hoverinfo":"text","line":{"color":"grey","width":2},"marker":{"angleref":"previous","color":"grey","size":16,"standoff":15,"symbol":"arrow"},"mode":"lines+markers","text":"tailings","x":[0.5652173913043479,0.9565217391304349],"y":[0.0,0.0],"type":"scatter"},{"hoverinfo":"text","line":{"color":"grey","width":2},"marker":{"angleref":"previous","color":"grey","size":16,"standoff":15,"symbol":"arrow"},"mode":"lines+markers","text":"product","x":[-0.2173913043478261,0.17391304347826086],"y":[-0.1956521739130435,-0.391304347826087],"type":"scatter"},{"hoverinfo":"none","marker":{"color":["grey","green","green","green","green","green","green","grey","grey"],"line":{"width":2},"size":30},"mode":"markers+text","text":["feed","screen","rougher","cleaner","scavenger","overflow","joiner","reject","product"],"x":[-1.0,-0.6086956521739131,-0.2173913043478261,0.17391304347826086,0.17391304347826086,0.5652173913043479,-0.2173913043478261,0.9565217391304349,0.17391304347826086],"y":[0.0,0.0,0.1956521739130435,0.391304347826087,0.0,0.0,-0.1956521739130435,0.0,-0.391304347826087],"type":"scatter"},{"hoverinfo":"text","marker":{"color":"grey","line":{"width":1},"size":3},"mode":"markers","text":["sample","undersize","oversize","rgr_uf","rgr_of","clr_of","clr_uf","scav_of","scav_uf","tailings","product"],"x":[-0.8043478260869565,-0.4130434782608696,-0.4130434782608696,-0.021739130434782622,-0.021739130434782622,0.3695652173913044,-0.021739130434782622,0.3695652173913044,-0.021739130434782622,0.7608695652173914,-0.021739130434782622],"y":[0.0,0.09782608695652174,-0.09782608695652174,0.29347826086956524,0.09782608695652174,0.1956521739130435,0.09782608695652174,0.0,-0.09782608695652174,0.0,-0.29347826086956524],"type":"scatter"}],                        {"hovermode":"closest","margin":{"b":20,"l":5,"r":5,"t":40},"paper_bgcolor":"rgba(0,0,0,0)","plot_bgcolor":"rgba(0,0,0,0)","showlegend":false,"title":{"font":{"size":16},"text":"DAG\u003cbr\u003e\u003cbr\u003e\u003csup\u003eBalanced: True\u003cbr\u003eEdge Status OK: True\u003c\u002fsup\u003e"},"xaxis":{"showgrid":false,"showticklabels":false,"zeroline":false},"yaxis":{"showgrid":false,"showticklabels":false,"zeroline":false},"template":{"data":{"histogram2dcontour":[{"type":"histogram2dcontour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"choropleth":[{"type":"choropleth","colorbar":{"outlinewidth":0,"ticks":""}}],"histogram2d":[{"type":"histogram2d","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmap":[{"type":"heatmap","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmapgl":[{"type":"heatmapgl","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"type":"contourcarpet","colorbar":{"outlinewidth":0,"ticks":""}}],"contour":[{"type":"contour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"surface":[{"type":"surface","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"type":"mesh3d","colorbar":{"outlinewidth":0,"ticks":""}}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"parcoords":[{"type":"parcoords","line":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolargl":[{"type":"scatterpolargl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"scattergeo":[{"type":"scattergeo","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolar":[{"type":"scatterpolar","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"scattergl":[{"type":"scattergl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatter3d":[{"type":"scatter3d","line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermapbox":[{"type":"scattermapbox","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterternary":[{"type":"scatterternary","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattercarpet":[{"type":"scattercarpet","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"type":"carpet"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}],"barpolar":[{"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"pie":[{"automargin":true,"type":"pie"}]},"layout":{"autotypenumbers":"strict","colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"hovermode":"closest","hoverlabel":{"align":"left"},"paper_bgcolor":"white","plot_bgcolor":"#E5ECF6","polar":{"bgcolor":"#E5ECF6","angularaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"radialaxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"ternary":{"bgcolor":"#E5ECF6","aaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"baxis":{"gridcolor":"white","linecolor":"white","ticks":""},"caxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]]},"xaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"yaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"scene":{"xaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"yaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"zaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"geo":{"bgcolor":"white","landcolor":"#E5ECF6","subunitcolor":"white","showland":true,"showlakes":true,"lakecolor":"white"},"title":{"x":0.05},"mapbox":{"style":"light"}}}},                        {"responsive": true}                    )                };                            </script>        </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 89-93

.. code-block:: default


    fig = fs.table_plot(plot_type='sankey', sankey_color_var='Fe', sankey_edge_colormap='copper_r', sankey_vmin=52,
                        sankey_vmax=70)
    plotly.io.show(fig)



.. raw:: html
    :file: images/sphx_glr_503_dag_with_partitions_001.html






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.343 seconds)


.. _sphx_glr_download_auto_examples_503_dag_with_partitions.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 503_dag_with_partitions.py <503_dag_with_partitions.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 503_dag_with_partitions.ipynb <503_dag_with_partitions.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
