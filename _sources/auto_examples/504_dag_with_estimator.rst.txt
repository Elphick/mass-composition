
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/504_dag_with_estimator.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_504_dag_with_estimator.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_504_dag_with_estimator.py:


DAG with Estimator
===================

Flowsheet can be used to apply an estimator in a process flowsheet.  This example demonstrates how to use a DAG
to define a flowsheet that applies a lump estimator to a feed stream.

The focus will not be on the model development, but rather on the simulation.  The model is a simple RandomForest
regressor that predicts the lump mass and composition from the feed stream.

.. note::
   This example uses the `estimator` extras.  ensure you have installed like ``poetry install -E estimator``.

.. GENERATED FROM PYTHON SOURCE LINES 15-32

.. code-block:: default

    import logging

    # This import at the top to guard against the estimator extras not being installed
    from elphick.mass_composition.utils.sklearn import PandasPipeline

    import pandas as pd
    import plotly
    from sklearn.ensemble import RandomForestRegressor
    from sklearn.model_selection import train_test_split
    from sklearn.pipeline import make_pipeline
    from sklearn.preprocessing import StandardScaler

    from elphick.mass_composition import MassComposition, Stream
    from elphick.mass_composition.dag import DAG
    from elphick.mass_composition.datasets.sample_data import iron_ore_met_sample_data
    from elphick.mass_composition.flowsheet import Flowsheet








.. GENERATED FROM PYTHON SOURCE LINES 33-36

.. code-block:: default

    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    logger = logging.getLogger(__name__)








.. GENERATED FROM PYTHON SOURCE LINES 37-43

Load Data
---------

We load some metallurgical data from a drill program, REF: A072391
Since we are not concerned about the model performance in this example, we'll convert the categorical feature
bulk_hole_no to an integer

.. GENERATED FROM PYTHON SOURCE LINES 43-57

.. code-block:: default


    df: pd.DataFrame = iron_ore_met_sample_data()

    base_components = ['fe', 'p', 'sio2', 'al2o3', 'loi']
    cols_x = ['dry_weight_lump_kg'] + [f'head_{comp}' for comp in base_components] + ['bulk_hole_no']
    cols_y = ['lump_pct'] + [f'lump_{comp}' for comp in base_components]

    df = df.loc[:, cols_x + cols_y].query('lump_pct>0').dropna(how='any')
    df = df.rename(columns={'dry_weight_lump_kg': 'head_mass_dry'})
    df['bulk_hole_no'] = df['bulk_hole_no'].astype('category').cat.codes

    logger.info(df.shape)
    df.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>head_mass_dry</th>
          <th>head_fe</th>
          <th>head_p</th>
          <th>head_sio2</th>
          <th>head_al2o3</th>
          <th>head_loi</th>
          <th>bulk_hole_no</th>
          <th>lump_pct</th>
          <th>lump_fe</th>
          <th>lump_p</th>
          <th>lump_sio2</th>
          <th>lump_al2o3</th>
          <th>lump_loi</th>
        </tr>
        <tr>
          <th>sample_number</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>30129</th>
          <td>0.31</td>
          <td>62.94</td>
          <td>0.02</td>
          <td>3.71</td>
          <td>1.51</td>
          <td>4.12</td>
          <td>0</td>
          <td>21.3</td>
          <td>64.95</td>
          <td>0.014</td>
          <td>2.29</td>
          <td>0.87</td>
          <td>3.83</td>
        </tr>
        <tr>
          <th>30131</th>
          <td>0.52</td>
          <td>64.79</td>
          <td>0.02</td>
          <td>2.88</td>
          <td>1.29</td>
          <td>2.80</td>
          <td>0</td>
          <td>22.4</td>
          <td>66.48</td>
          <td>0.009</td>
          <td>1.67</td>
          <td>0.65</td>
          <td>2.46</td>
        </tr>
        <tr>
          <th>30132</th>
          <td>0.41</td>
          <td>65.22</td>
          <td>0.02</td>
          <td>2.64</td>
          <td>1.15</td>
          <td>2.61</td>
          <td>0</td>
          <td>16.6</td>
          <td>66.78</td>
          <td>0.009</td>
          <td>1.34</td>
          <td>0.47</td>
          <td>2.67</td>
        </tr>
        <tr>
          <th>30133</th>
          <td>0.32</td>
          <td>64.67</td>
          <td>0.02</td>
          <td>2.85</td>
          <td>1.17</td>
          <td>3.00</td>
          <td>0</td>
          <td>19.6</td>
          <td>66.23</td>
          <td>0.011</td>
          <td>1.56</td>
          <td>0.62</td>
          <td>2.74</td>
        </tr>
        <tr>
          <th>30134</th>
          <td>0.31</td>
          <td>65.29</td>
          <td>0.02</td>
          <td>2.25</td>
          <td>0.94</td>
          <td>2.93</td>
          <td>0</td>
          <td>13.9</td>
          <td>66.53</td>
          <td>0.011</td>
          <td>1.41</td>
          <td>0.54</td>
          <td>2.91</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 58-60

Build a model
-------------

.. GENERATED FROM PYTHON SOURCE LINES 60-66

.. code-block:: default


    X: pd.DataFrame = df[[col for col in df.columns if col not in cols_y]]
    y: pd.DataFrame = df[cols_y]

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)








.. GENERATED FROM PYTHON SOURCE LINES 67-68

The model needs to be wrapped in a PandasPipeline object to ensure that the column names are preserved.

.. GENERATED FROM PYTHON SOURCE LINES 68-74

.. code-block:: default


    pipe: PandasPipeline = PandasPipeline.from_pipeline(
        make_pipeline(StandardScaler(), RandomForestRegressor(n_estimators=100, random_state=42)))

    pipe






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-1 {
      /* Definition of color scheme common for light and dark mode */
      --sklearn-color-text: black;
      --sklearn-color-line: gray;
      /* Definition of color scheme for unfitted estimators */
      --sklearn-color-unfitted-level-0: #fff5e6;
      --sklearn-color-unfitted-level-1: #f6e4d2;
      --sklearn-color-unfitted-level-2: #ffe0b3;
      --sklearn-color-unfitted-level-3: chocolate;
      /* Definition of color scheme for fitted estimators */
      --sklearn-color-fitted-level-0: #f0f8ff;
      --sklearn-color-fitted-level-1: #d4ebff;
      --sklearn-color-fitted-level-2: #b3dbfd;
      --sklearn-color-fitted-level-3: cornflowerblue;

      /* Specific color for light theme */
      --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
      --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
      --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
      --sklearn-color-icon: #696969;

      @media (prefers-color-scheme: dark) {
        /* Redefinition of color scheme for dark theme */
        --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
        --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
        --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
        --sklearn-color-icon: #878787;
      }
    }

    #sk-container-id-1 {
      color: var(--sklearn-color-text);
    }

    #sk-container-id-1 pre {
      padding: 0;
    }

    #sk-container-id-1 input.sk-hidden--visually {
      border: 0;
      clip: rect(1px 1px 1px 1px);
      clip: rect(1px, 1px, 1px, 1px);
      height: 1px;
      margin: -1px;
      overflow: hidden;
      padding: 0;
      position: absolute;
      width: 1px;
    }

    #sk-container-id-1 div.sk-dashed-wrapped {
      border: 1px dashed var(--sklearn-color-line);
      margin: 0 0.4em 0.5em 0.4em;
      box-sizing: border-box;
      padding-bottom: 0.4em;
      background-color: var(--sklearn-color-background);
    }

    #sk-container-id-1 div.sk-container {
      /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
         but bootstrap.min.css set `[hidden] { display: none !important; }`
         so we also need the `!important` here to be able to override the
         default hidden behavior on the sphinx rendered scikit-learn.org.
         See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
      display: inline-block !important;
      position: relative;
    }

    #sk-container-id-1 div.sk-text-repr-fallback {
      display: none;
    }

    div.sk-parallel-item,
    div.sk-serial,
    div.sk-item {
      /* draw centered vertical line to link estimators */
      background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
      background-size: 2px 100%;
      background-repeat: no-repeat;
      background-position: center center;
    }

    /* Parallel-specific style estimator block */

    #sk-container-id-1 div.sk-parallel-item::after {
      content: "";
      width: 100%;
      border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
      flex-grow: 1;
    }

    #sk-container-id-1 div.sk-parallel {
      display: flex;
      align-items: stretch;
      justify-content: center;
      background-color: var(--sklearn-color-background);
      position: relative;
    }

    #sk-container-id-1 div.sk-parallel-item {
      display: flex;
      flex-direction: column;
    }

    #sk-container-id-1 div.sk-parallel-item:first-child::after {
      align-self: flex-end;
      width: 50%;
    }

    #sk-container-id-1 div.sk-parallel-item:last-child::after {
      align-self: flex-start;
      width: 50%;
    }

    #sk-container-id-1 div.sk-parallel-item:only-child::after {
      width: 0;
    }

    /* Serial-specific style estimator block */

    #sk-container-id-1 div.sk-serial {
      display: flex;
      flex-direction: column;
      align-items: center;
      background-color: var(--sklearn-color-background);
      padding-right: 1em;
      padding-left: 1em;
    }


    /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
    clickable and can be expanded/collapsed.
    - Pipeline and ColumnTransformer use this feature and define the default style
    - Estimators will overwrite some part of the style using the `sk-estimator` class
    */

    /* Pipeline and ColumnTransformer style (default) */

    #sk-container-id-1 div.sk-toggleable {
      /* Default theme specific background. It is overwritten whether we have a
      specific estimator or a Pipeline/ColumnTransformer */
      background-color: var(--sklearn-color-background);
    }

    /* Toggleable label */
    #sk-container-id-1 label.sk-toggleable__label {
      cursor: pointer;
      display: block;
      width: 100%;
      margin-bottom: 0;
      padding: 0.5em;
      box-sizing: border-box;
      text-align: center;
    }

    #sk-container-id-1 label.sk-toggleable__label-arrow:before {
      /* Arrow on the left of the label */
      content: "▸";
      float: left;
      margin-right: 0.25em;
      color: var(--sklearn-color-icon);
    }

    #sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {
      color: var(--sklearn-color-text);
    }

    /* Toggleable content - dropdown */

    #sk-container-id-1 div.sk-toggleable__content {
      max-height: 0;
      max-width: 0;
      overflow: hidden;
      text-align: left;
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-1 div.sk-toggleable__content.fitted {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    #sk-container-id-1 div.sk-toggleable__content pre {
      margin: 0.2em;
      border-radius: 0.25em;
      color: var(--sklearn-color-text);
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-1 div.sk-toggleable__content.fitted pre {
      /* unfitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    #sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {
      /* Expand drop-down */
      max-height: 200px;
      max-width: 100%;
      overflow: auto;
    }

    #sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
      content: "▾";
    }

    /* Pipeline/ColumnTransformer-specific style */

    #sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Estimator-specific style */

    /* Colorize estimator box */
    #sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-2);
    }

    #sk-container-id-1 div.sk-label label.sk-toggleable__label,
    #sk-container-id-1 div.sk-label label {
      /* The background is the default theme color */
      color: var(--sklearn-color-text-on-default-background);
    }

    /* On hover, darken the color of the background */
    #sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    /* Label box, darken color on hover, fitted */
    #sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Estimator label */

    #sk-container-id-1 div.sk-label label {
      font-family: monospace;
      font-weight: bold;
      display: inline-block;
      line-height: 1.2em;
    }

    #sk-container-id-1 div.sk-label-container {
      text-align: center;
    }

    /* Estimator-specific */
    #sk-container-id-1 div.sk-estimator {
      font-family: monospace;
      border: 1px dotted var(--sklearn-color-border-box);
      border-radius: 0.25em;
      box-sizing: border-box;
      margin-bottom: 0.5em;
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-1 div.sk-estimator.fitted {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    /* on hover */
    #sk-container-id-1 div.sk-estimator:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-1 div.sk-estimator.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Specification for estimator info (e.g. "i" and "?") */

    /* Common style for "i" and "?" */

    .sk-estimator-doc-link,
    a:link.sk-estimator-doc-link,
    a:visited.sk-estimator-doc-link {
      float: right;
      font-size: smaller;
      line-height: 1em;
      font-family: monospace;
      background-color: var(--sklearn-color-background);
      border-radius: 1em;
      height: 1em;
      width: 1em;
      text-decoration: none !important;
      margin-left: 1ex;
      /* unfitted */
      border: var(--sklearn-color-unfitted-level-1) 1pt solid;
      color: var(--sklearn-color-unfitted-level-1);
    }

    .sk-estimator-doc-link.fitted,
    a:link.sk-estimator-doc-link.fitted,
    a:visited.sk-estimator-doc-link.fitted {
      /* fitted */
      border: var(--sklearn-color-fitted-level-1) 1pt solid;
      color: var(--sklearn-color-fitted-level-1);
    }

    /* On hover */
    div.sk-estimator:hover .sk-estimator-doc-link:hover,
    .sk-estimator-doc-link:hover,
    div.sk-label-container:hover .sk-estimator-doc-link:hover,
    .sk-estimator-doc-link:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
    .sk-estimator-doc-link.fitted:hover,
    div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
    .sk-estimator-doc-link.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    /* Span, style for the box shown on hovering the info icon */
    .sk-estimator-doc-link span {
      display: none;
      z-index: 9999;
      position: relative;
      font-weight: normal;
      right: .2ex;
      padding: .5ex;
      margin: .5ex;
      width: min-content;
      min-width: 20ex;
      max-width: 50ex;
      color: var(--sklearn-color-text);
      box-shadow: 2pt 2pt 4pt #999;
      /* unfitted */
      background: var(--sklearn-color-unfitted-level-0);
      border: .5pt solid var(--sklearn-color-unfitted-level-3);
    }

    .sk-estimator-doc-link.fitted span {
      /* fitted */
      background: var(--sklearn-color-fitted-level-0);
      border: var(--sklearn-color-fitted-level-3);
    }

    .sk-estimator-doc-link:hover span {
      display: block;
    }

    /* "?"-specific style due to the `<a>` HTML tag */

    #sk-container-id-1 a.estimator_doc_link {
      float: right;
      font-size: 1rem;
      line-height: 1em;
      font-family: monospace;
      background-color: var(--sklearn-color-background);
      border-radius: 1rem;
      height: 1rem;
      width: 1rem;
      text-decoration: none;
      /* unfitted */
      color: var(--sklearn-color-unfitted-level-1);
      border: var(--sklearn-color-unfitted-level-1) 1pt solid;
    }

    #sk-container-id-1 a.estimator_doc_link.fitted {
      /* fitted */
      border: var(--sklearn-color-fitted-level-1) 1pt solid;
      color: var(--sklearn-color-fitted-level-1);
    }

    /* On hover */
    #sk-container-id-1 a.estimator_doc_link:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    #sk-container-id-1 a.estimator_doc_link.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-3);
    }
    </style><div id="sk-container-id-1" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>PandasPipeline(steps=[(&#x27;standardscaler&#x27;, StandardScaler()),
                          (&#x27;randomforestregressor&#x27;,
                           RandomForestRegressor(random_state=42))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label  sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-1" type="checkbox" ><label for="sk-estimator-id-1" class="sk-toggleable__label  sk-toggleable__label-arrow ">&nbsp;PandasPipeline<span class="sk-estimator-doc-link ">i<span>Not fitted</span></span></label><div class="sk-toggleable__content "><pre>PandasPipeline(steps=[(&#x27;standardscaler&#x27;, StandardScaler()),
                          (&#x27;randomforestregressor&#x27;,
                           RandomForestRegressor(random_state=42))])</pre></div> </div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator  sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-2" type="checkbox" ><label for="sk-estimator-id-2" class="sk-toggleable__label  sk-toggleable__label-arrow ">&nbsp;StandardScaler<a class="sk-estimator-doc-link " rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.4/modules/generated/sklearn.preprocessing.StandardScaler.html">?<span>Documentation for StandardScaler</span></a></label><div class="sk-toggleable__content "><pre>StandardScaler()</pre></div> </div></div><div class="sk-item"><div class="sk-estimator  sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-3" type="checkbox" ><label for="sk-estimator-id-3" class="sk-toggleable__label  sk-toggleable__label-arrow ">&nbsp;RandomForestRegressor<a class="sk-estimator-doc-link " rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.4/modules/generated/sklearn.ensemble.RandomForestRegressor.html">?<span>Documentation for RandomForestRegressor</span></a></label><div class="sk-toggleable__content "><pre>RandomForestRegressor(random_state=42)</pre></div> </div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 75-79

Test the model
--------------
The model can be called directly to predict the lump percentage and composition from the feed stream.
We will pass in a dataframe with the same columns as the training data.

.. GENERATED FROM PYTHON SOURCE LINES 79-84

.. code-block:: default


    y_pred = pipe.fit(X_train.drop(columns=['head_mass_dry']), y_train).predict(X_test)
    logger.info(f'Test score: {pipe.score(X_test, y_test)}')
    y_pred.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>lump_pct</th>
          <th>lump_fe</th>
          <th>lump_p</th>
          <th>lump_sio2</th>
          <th>lump_al2o3</th>
          <th>lump_loi</th>
        </tr>
        <tr>
          <th>sample_number</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>30838</th>
          <td>21.150</td>
          <td>62.1259</td>
          <td>0.03646</td>
          <td>1.5286</td>
          <td>0.9012</td>
          <td>8.3704</td>
        </tr>
        <tr>
          <th>30836</th>
          <td>17.511</td>
          <td>61.8068</td>
          <td>0.04462</td>
          <td>1.6825</td>
          <td>0.9777</td>
          <td>8.5672</td>
        </tr>
        <tr>
          <th>30143</th>
          <td>20.425</td>
          <td>64.9562</td>
          <td>0.01953</td>
          <td>2.0668</td>
          <td>0.6913</td>
          <td>4.1378</td>
        </tr>
        <tr>
          <th>30158</th>
          <td>18.170</td>
          <td>58.1892</td>
          <td>0.03722</td>
          <td>8.7937</td>
          <td>0.9085</td>
          <td>6.5543</td>
        </tr>
        <tr>
          <th>30915</th>
          <td>22.386</td>
          <td>62.5843</td>
          <td>0.03022</td>
          <td>1.4852</td>
          <td>0.9723</td>
          <td>7.6845</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 85-88

Create a Head MassComposition object
------------------------------------
Now we will create a MassComposition object and use it to apply the model to the feed stream.

.. GENERATED FROM PYTHON SOURCE LINES 88-96

.. code-block:: default


    head: MassComposition = MassComposition(data=X_test.drop(columns=['bulk_hole_no']), name='head',
                                            mass_dry_var='head_mass_dry')
    lump, fines = head.split_by_estimator(estimator=pipe, name_2='fines',
                                          mass_recovery_column='lump_pct', mass_recovery_max=100,
                                          extra_features=X_test['bulk_hole_no'])
    lump.data.to_dataframe().head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>mass_wet</th>
          <th>mass_dry</th>
          <th>H2O</th>
          <th>Fe</th>
          <th>P</th>
          <th>SiO2</th>
          <th>Al2O3</th>
          <th>LOI</th>
        </tr>
        <tr>
          <th>sample_number</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>30838</th>
          <td>0.300330</td>
          <td>0.300330</td>
          <td>0.0</td>
          <td>62.1259</td>
          <td>0.03646</td>
          <td>1.5286</td>
          <td>0.9012</td>
          <td>8.3704</td>
        </tr>
        <tr>
          <th>30836</th>
          <td>0.227643</td>
          <td>0.227643</td>
          <td>0.0</td>
          <td>61.8068</td>
          <td>0.04462</td>
          <td>1.6825</td>
          <td>0.9777</td>
          <td>8.5672</td>
        </tr>
        <tr>
          <th>30143</th>
          <td>0.085785</td>
          <td>0.085785</td>
          <td>0.0</td>
          <td>64.9562</td>
          <td>0.01953</td>
          <td>2.0668</td>
          <td>0.6913</td>
          <td>4.1378</td>
        </tr>
        <tr>
          <th>30158</th>
          <td>0.101752</td>
          <td>0.101752</td>
          <td>0.0</td>
          <td>58.1892</td>
          <td>0.03722</td>
          <td>8.7937</td>
          <td>0.9085</td>
          <td>6.5543</td>
        </tr>
        <tr>
          <th>30915</th>
          <td>0.385039</td>
          <td>0.385039</td>
          <td>0.0</td>
          <td>62.5843</td>
          <td>0.03022</td>
          <td>1.4852</td>
          <td>0.9723</td>
          <td>7.6845</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 97-99

.. code-block:: default

    fines.data.to_dataframe().head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>mass_wet</th>
          <th>mass_dry</th>
          <th>H2O</th>
          <th>Fe</th>
          <th>P</th>
          <th>SiO2</th>
          <th>Al2O3</th>
          <th>LOI</th>
        </tr>
        <tr>
          <th>sample_number</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>30838</th>
          <td>1.119670</td>
          <td>1.119670</td>
          <td>0.0</td>
          <td>60.672634</td>
          <td>0.053632</td>
          <td>1.974256</td>
          <td>1.166007</td>
          <td>9.092784</td>
        </tr>
        <tr>
          <th>30836</th>
          <td>1.072357</td>
          <td>1.072357</td>
          <td>0.0</td>
          <td>60.416554</td>
          <td>0.051142</td>
          <td>2.309856</td>
          <td>1.501770</td>
          <td>8.752437</td>
        </tr>
        <tr>
          <th>30143</th>
          <td>0.334215</td>
          <td>0.334215</td>
          <td>0.0</td>
          <td>63.892801</td>
          <td>0.032687</td>
          <td>2.975628</td>
          <td>1.644740</td>
          <td>3.424259</td>
        </tr>
        <tr>
          <th>30158</th>
          <td>0.458248</td>
          <td>0.458248</td>
          <td>0.0</td>
          <td>58.788980</td>
          <td>0.040617</td>
          <td>8.092612</td>
          <td>1.643560</td>
          <td>5.669172</td>
        </tr>
        <tr>
          <th>30915</th>
          <td>1.334961</td>
          <td>1.334961</td>
          <td>0.0</td>
          <td>60.800730</td>
          <td>0.042821</td>
          <td>2.135598</td>
          <td>1.948541</td>
          <td>8.155420</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 100-107

Define the DAG
--------------

First we define a simple DAG, where the feed stream is split into two streams, lump and fines.
The lump estimator requires the usual mass-composition variables plus an addition feature/variable
called `bulk_hole_no`. Since the `bulk_hole_no` is available in the feed stream, it is immediately accessible
to the estimator.

.. GENERATED FROM PYTHON SOURCE LINES 107-123

.. code-block:: default


    head: MassComposition = MassComposition(data=X_test, name='head',
                                            mass_dry_var='head_mass_dry')

    dag = DAG(name='A072391', n_jobs=1)
    dag.add_input(name='head')
    dag.add_step(name='screen', operation=Stream.split_by_estimator, streams=['head'],
                 kwargs={'estimator': pipe, 'name_1': 'lump', 'name_2': 'fines',
                         'mass_recovery_column': 'lump_pct', 'mass_recovery_max': 100})
    dag.add_output(name='lump', stream='lump')
    dag.add_output(name='fines', stream='fines')
    dag.run(input_streams={'head': head}, progress_bar=True)

    fig = Flowsheet.from_dag(dag).plot_network()
    fig





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Executing nodes:   0%|          | 0/4 [00:00<?, ?node/s]    Executing nodes:   0%|          | 0/4 [00:00<?, ?node/s, Processed node: head]    Executing nodes:  25%|##5       | 1/4 [00:00<00:00,  3.99node/s, Processed node: screen]    Executing nodes:  50%|#####     | 2/4 [00:00<00:00,  7.98node/s, Processed node: screen]    Executing nodes:  50%|#####     | 2/4 [00:00<00:00,  7.98node/s, Processed node: lump]      Executing nodes:  75%|#######5  | 3/4 [00:00<00:00,  7.98node/s, Processed node: fines]    Executing nodes: 100%|##########| 4/4 [00:00<00:00, 15.93node/s, Processed node: fines]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>                        <script type="text/javascript">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>
            <script charset="utf-8" src="https://cdn.plot.ly/plotly-2.32.0.min.js"></script>                <div id="4c00570d-4b7f-495f-b052-d8a496bce36b" class="plotly-graph-div" style="height:100%; width:100%;"></div>            <script type="text/javascript">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("4c00570d-4b7f-495f-b052-d8a496bce36b")) {                    Plotly.newPlot(                        "4c00570d-4b7f-495f-b052-d8a496bce36b",                        [{"hoverinfo":"text","line":{"color":"grey","width":2},"marker":{"angleref":"previous","color":"grey","size":16,"standoff":15,"symbol":"arrow"},"mode":"lines+markers","text":"head","x":[-1.0,-0.2],"y":[0.0,0.0],"type":"scatter"},{"hoverinfo":"text","line":{"color":"grey","width":2},"marker":{"angleref":"previous","color":"grey","size":16,"standoff":15,"symbol":"arrow"},"mode":"lines+markers","text":"lump","x":[-0.2,0.6000000000000001],"y":[0.0,0.4],"type":"scatter"},{"hoverinfo":"text","line":{"color":"grey","width":2},"marker":{"angleref":"previous","color":"grey","size":16,"standoff":15,"symbol":"arrow"},"mode":"lines+markers","text":"fines","x":[-0.2,0.6000000000000001],"y":[0.0,-0.4],"type":"scatter"},{"hoverinfo":"none","marker":{"color":["grey","green","grey","grey"],"line":{"width":2},"size":30},"mode":"markers+text","text":["head","screen","lump","fines"],"x":[-1.0,-0.2,0.6000000000000001,0.6000000000000001],"y":[0.0,0.0,0.4,-0.4],"type":"scatter"},{"hoverinfo":"text","marker":{"color":"grey","line":{"width":1},"size":3},"mode":"markers","text":["head","lump","fines"],"x":[-0.6,0.20000000000000004,0.20000000000000004],"y":[0.0,0.2,-0.2],"type":"scatter"}],                        {"hovermode":"closest","margin":{"b":20,"l":5,"r":5,"t":40},"paper_bgcolor":"rgba(0,0,0,0)","plot_bgcolor":"rgba(0,0,0,0)","showlegend":false,"title":{"font":{"size":16},"text":"A072391\u003cbr\u003e\u003cbr\u003e\u003csup\u003eBalanced: True\u003cbr\u003eEdge Status OK: True\u003c\u002fsup\u003e"},"xaxis":{"showgrid":false,"showticklabels":false,"zeroline":false},"yaxis":{"showgrid":false,"showticklabels":false,"zeroline":false},"template":{"data":{"histogram2dcontour":[{"type":"histogram2dcontour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"choropleth":[{"type":"choropleth","colorbar":{"outlinewidth":0,"ticks":""}}],"histogram2d":[{"type":"histogram2d","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmap":[{"type":"heatmap","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmapgl":[{"type":"heatmapgl","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"type":"contourcarpet","colorbar":{"outlinewidth":0,"ticks":""}}],"contour":[{"type":"contour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"surface":[{"type":"surface","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"type":"mesh3d","colorbar":{"outlinewidth":0,"ticks":""}}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"parcoords":[{"type":"parcoords","line":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolargl":[{"type":"scatterpolargl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"scattergeo":[{"type":"scattergeo","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolar":[{"type":"scatterpolar","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"scattergl":[{"type":"scattergl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatter3d":[{"type":"scatter3d","line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermapbox":[{"type":"scattermapbox","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterternary":[{"type":"scatterternary","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattercarpet":[{"type":"scattercarpet","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"type":"carpet"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}],"barpolar":[{"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"pie":[{"automargin":true,"type":"pie"}]},"layout":{"autotypenumbers":"strict","colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"hovermode":"closest","hoverlabel":{"align":"left"},"paper_bgcolor":"white","plot_bgcolor":"#E5ECF6","polar":{"bgcolor":"#E5ECF6","angularaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"radialaxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"ternary":{"bgcolor":"#E5ECF6","aaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"baxis":{"gridcolor":"white","linecolor":"white","ticks":""},"caxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]]},"xaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"yaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"scene":{"xaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"yaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"zaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"geo":{"bgcolor":"white","landcolor":"#E5ECF6","subunitcolor":"white","showland":true,"showlakes":true,"lakecolor":"white"},"title":{"x":0.05},"mapbox":{"style":"light"}}}},                        {"responsive": true}                    )                };                            </script>        </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 124-134

More Complex DAG
----------------
This DAG is to test a more complex flowsheet where the estimator may have all the features
immediately available in the parent stream.

.. note::
   This example works, but it does so since all attribute (extra) variables are passed all the way around
   the network in the current design.  This is to be changed in the future to allow for more efficient processing.
   Once attributes are no longer passed, changes will be needed to the DAG to marshall
   features from other streams in the network (most often the input stream).

.. GENERATED FROM PYTHON SOURCE LINES 134-154

.. code-block:: default


    dag = DAG(name='A072391', n_jobs=1)
    dag.add_input(name='head')
    dag.add_step(name='screen', operation=Stream.split_by_estimator, streams=['head'],
                 kwargs={'estimator': pipe, 'name_1': 'lump', 'name_2': 'fines',
                         'mass_recovery_column': 'lump_pct', 'mass_recovery_max': 100})
    dag.add_step(name='screen_2', operation=Stream.split_by_estimator, streams=['fines'],
                 kwargs={'estimator': pipe, 'name_1': 'lump_2', 'name_2': 'fines_2',
                         'mass_recovery_column': 'lump_pct', 'mass_recovery_max': 100,
                         'allow_prefix_mismatch': True})
    dag.add_output(name='lump', stream='lump_2')
    dag.add_output(name='fines', stream='fines_2')
    dag.add_output(name='stockpile', stream='lump')
    dag.run(input_streams={'head': head}, progress_bar=True)

    fs: Flowsheet = Flowsheet.from_dag(dag)

    fig = fs.plot_network()
    fig





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Executing nodes:   0%|          | 0/6 [00:00<?, ?node/s]    Executing nodes:   0%|          | 0/6 [00:00<?, ?node/s, Processed node: head]    Executing nodes:  17%|#6        | 1/6 [00:00<00:01,  3.92node/s, Processed node: screen]    Executing nodes:  33%|###3      | 2/6 [00:00<00:00,  7.83node/s, Processed node: screen]    Executing nodes:  33%|###3      | 2/6 [00:00<00:00,  7.83node/s, Processed node: screen_2]    Executing nodes:  50%|#####     | 3/6 [00:00<00:00,  6.11node/s, Processed node: screen_2]    Executing nodes:  50%|#####     | 3/6 [00:00<00:00,  6.11node/s, Processed node: stockpile]    Executing nodes:  67%|######6   | 4/6 [00:00<00:00,  6.11node/s, Processed node: lump]         Executing nodes:  83%|########3 | 5/6 [00:00<00:00,  6.11node/s, Processed node: fines]    Executing nodes: 100%|##########| 6/6 [00:00<00:00, 12.77node/s, Processed node: fines]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>                        <script type="text/javascript">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>
            <script charset="utf-8" src="https://cdn.plot.ly/plotly-2.32.0.min.js"></script>                <div id="1a57092d-5091-47c4-85d6-ba0deada1336" class="plotly-graph-div" style="height:100%; width:100%;"></div>            <script type="text/javascript">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("1a57092d-5091-47c4-85d6-ba0deada1336")) {                    Plotly.newPlot(                        "1a57092d-5091-47c4-85d6-ba0deada1336",                        [{"hoverinfo":"text","line":{"color":"grey","width":2},"marker":{"angleref":"previous","color":"grey","size":16,"standoff":15,"symbol":"arrow"},"mode":"lines+markers","text":"head","x":[-1.0,-0.4545454545454546],"y":[0.0,0.0],"type":"scatter"},{"hoverinfo":"text","line":{"color":"grey","width":2},"marker":{"angleref":"previous","color":"grey","size":16,"standoff":15,"symbol":"arrow"},"mode":"lines+markers","text":"fines","x":[-0.4545454545454546,0.09090909090909093],"y":[0.0,0.27272727272727276],"type":"scatter"},{"hoverinfo":"text","line":{"color":"grey","width":2},"marker":{"angleref":"previous","color":"grey","size":16,"standoff":15,"symbol":"arrow"},"mode":"lines+markers","text":"lump","x":[-0.4545454545454546,0.09090909090909093],"y":[0.0,-0.27272727272727276],"type":"scatter"},{"hoverinfo":"text","line":{"color":"grey","width":2},"marker":{"angleref":"previous","color":"grey","size":16,"standoff":15,"symbol":"arrow"},"mode":"lines+markers","text":"lump_2","x":[0.09090909090909093,0.6363636363636365],"y":[0.27272727272727276,0.27272727272727276],"type":"scatter"},{"hoverinfo":"text","line":{"color":"grey","width":2},"marker":{"angleref":"previous","color":"grey","size":16,"standoff":15,"symbol":"arrow"},"mode":"lines+markers","text":"fines_2","x":[0.09090909090909093,0.6363636363636365],"y":[0.27272727272727276,-0.27272727272727276],"type":"scatter"},{"hoverinfo":"none","marker":{"color":["grey","green","green","grey","grey","grey"],"line":{"width":2},"size":30},"mode":"markers+text","text":["head","screen","screen_2","lump","fines","stockpile"],"x":[-1.0,-0.4545454545454546,0.09090909090909093,0.6363636363636365,0.6363636363636365,0.09090909090909093],"y":[0.0,0.0,0.27272727272727276,0.27272727272727276,-0.27272727272727276,-0.27272727272727276],"type":"scatter"},{"hoverinfo":"text","marker":{"color":"grey","line":{"width":1},"size":3},"mode":"markers","text":["head","fines","lump","lump_2","fines_2"],"x":[-0.7272727272727273,-0.18181818181818182,-0.18181818181818182,0.3636363636363637,0.3636363636363637],"y":[0.0,0.13636363636363638,-0.13636363636363638,0.27272727272727276,0.0],"type":"scatter"}],                        {"hovermode":"closest","margin":{"b":20,"l":5,"r":5,"t":40},"paper_bgcolor":"rgba(0,0,0,0)","plot_bgcolor":"rgba(0,0,0,0)","showlegend":false,"title":{"font":{"size":16},"text":"A072391\u003cbr\u003e\u003cbr\u003e\u003csup\u003eBalanced: True\u003cbr\u003eEdge Status OK: True\u003c\u002fsup\u003e"},"xaxis":{"showgrid":false,"showticklabels":false,"zeroline":false},"yaxis":{"showgrid":false,"showticklabels":false,"zeroline":false},"template":{"data":{"histogram2dcontour":[{"type":"histogram2dcontour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"choropleth":[{"type":"choropleth","colorbar":{"outlinewidth":0,"ticks":""}}],"histogram2d":[{"type":"histogram2d","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmap":[{"type":"heatmap","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmapgl":[{"type":"heatmapgl","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"type":"contourcarpet","colorbar":{"outlinewidth":0,"ticks":""}}],"contour":[{"type":"contour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"surface":[{"type":"surface","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"type":"mesh3d","colorbar":{"outlinewidth":0,"ticks":""}}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"parcoords":[{"type":"parcoords","line":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolargl":[{"type":"scatterpolargl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"scattergeo":[{"type":"scattergeo","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolar":[{"type":"scatterpolar","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"scattergl":[{"type":"scattergl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatter3d":[{"type":"scatter3d","line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermapbox":[{"type":"scattermapbox","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterternary":[{"type":"scatterternary","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattercarpet":[{"type":"scattercarpet","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"type":"carpet"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}],"barpolar":[{"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"pie":[{"automargin":true,"type":"pie"}]},"layout":{"autotypenumbers":"strict","colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"hovermode":"closest","hoverlabel":{"align":"left"},"paper_bgcolor":"white","plot_bgcolor":"#E5ECF6","polar":{"bgcolor":"#E5ECF6","angularaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"radialaxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"ternary":{"bgcolor":"#E5ECF6","aaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"baxis":{"gridcolor":"white","linecolor":"white","ticks":""},"caxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]]},"xaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"yaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"scene":{"xaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"yaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"zaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"geo":{"bgcolor":"white","landcolor":"#E5ECF6","subunitcolor":"white","showland":true,"showlakes":true,"lakecolor":"white"},"title":{"x":0.05},"mapbox":{"style":"light"}}}},                        {"responsive": true}                    )                };                            </script>        </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 155-159

.. code-block:: default


    fig = fs.table_plot(plot_type='sankey', sankey_color_var='Fe', sankey_edge_colormap='copper_r', sankey_vmin=52,
                        sankey_vmax=70)
    plotly.io.show(fig)



.. raw:: html
    :file: images/sphx_glr_504_dag_with_estimator_001.html






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.498 seconds)


.. _sphx_glr_download_auto_examples_504_dag_with_estimator.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 504_dag_with_estimator.py <504_dag_with_estimator.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 504_dag_with_estimator.ipynb <504_dag_with_estimator.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
