"""
Compare
=======

Consistent MassComposition objects can be compared.  Objects generated by math operations, or connected in an
MCNetwork are candidates for comparison.

Comparison can be performed by:
- recovery
- difference
- divide

"""

import pandas as pd
import plotly
import xarray as xr

from elphick.mass_composition import MassComposition
from elphick.mass_composition.datasets.sample_data import sample_data

# %%
#
# Create a MassComposition object
# -------------------------------
#
# We get some demo data in the form of a pandas DataFrame

df_data: pd.DataFrame = sample_data()
df_data

# %%
# Construct a MassComposition object

obj_mc: MassComposition = MassComposition(df_data, name='product')
obj_mc.data.to_dataframe()

# %%
#
# Compare by Recovery
# -------------------
#
# Recovery for an object is defined as the proportion of component mass compared with (divided by) the
# component mass of another object.  In mineral processing recovery is often used to compare the recovered "metal"
# in product compared to what was fed.  Recovery is also an important metric when considering internal separation
# circuits inside a larger facility.
#
# In this example we'll simply double the test object and call it 'feed'

obj_mc_ref: MassComposition = obj_mc.add(obj_mc, name='feed')
obj_mc_ref.data.to_dataframe()

# %%
rec_1: pd.DataFrame = obj_mc.compare(comparison='recovery', other=obj_mc_ref)
rec_1

# %%
# By default the variable names are explicit for clarity, though the basic variables names can be preserved.

rec_2: pd.DataFrame = obj_mc.compare(comparison='recovery', other=obj_mc_ref, explicit_names=False)
rec_2

# %%
# The xarray Dataset can be returned if desired.

rec_3: xr.Dataset = obj_mc.compare(comparison='recovery', other=obj_mc_ref, explicit_names=False, as_dataframe=False)
rec_3


# %%
#
# Compare by Difference
# ---------------------
#
# Comparing by difference simply subtracts mass and composition.  No conversion of composition to mass units is made.
#

rec_4: pd.DataFrame = obj_mc.compare(comparison='difference', other=obj_mc_ref)
rec_4

# %%
#
# Compare by Division
# --------------------
#
# Comparing by simply dividing mass and composition.  No conversion of composition to mass units is made.
# In the mineral processing context, the result may be described as the "upgrade ratio".

rec_5: pd.DataFrame = obj_mc.compare(comparison='divide', other=obj_mc_ref)
rec_5

# %%
# Comparison Plot
# ---------------
#
# This plot compares one stream against another, with one component per subplot.

fig = obj_mc.plot_comparison(other=obj_mc_ref, color='group')
fig.update_layout(height=600)
fig

# %%
fig = obj_mc.plot_comparison(other=obj_mc_ref, vars_exclude=['H2O'], color='group')
fig.update_layout(height=600)
# noinspection PyArgumentList,PyTypeChecker
plotly.io.show(fig)
